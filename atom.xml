<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[知识管理、学习记录]]></title>
  <subtitle><![CDATA[不为无益之事，何以遣有涯之生]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://xusida.github.io/"/>
  <updated>2015-08-25T09:38:46.240Z</updated>
  <id>http://xusida.github.io/</id>
  
  <author>
    <name><![CDATA[xusida]]></name>
    <email><![CDATA[xusida.plus@gmail.com]]></email>
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[CI服务器搭建]]></title>
    <link href="http://xusida.github.io/2015/08/25/CI%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/"/>
    <id>http://xusida.github.io/2015/08/25/CI服务器搭建/</id>
    <published>2015-08-25T06:54:17.000Z</published>
    <updated>2015-08-25T09:38:33.000Z</updated>
    <content type="html"><![CDATA[<h3 id="CI服务器">CI服务器</h3>
<p>CI服务器，持续集成服务器,通过自动化的构建来验证，包括自动编译、发布和测试，从而尽快地发现集成错误，让团队能够更快的开发内聚的软件。本文搭建基于 Docker+Jenkis+Sonar+Nexus 的CI服务器。</p>
<h3 id="环境准备">环境准备</h3>
<p>Docker环境准备（略），确信docker服务已安装并且docker命令可执行。</p>
<pre><code>    <span class="built_in">sudo</span> docker
</code></pre><h3 id="Nexus安装">Nexus安装</h3>
<p>1.安装</p>
<pre><code>    <span class="built_in">sudo</span> docker search nexus
</code></pre><p>找到<code>sonatype/nexus</code></p>
<pre><code>    sonatype/nexus                       Sonatype Nexus                                  <span class="number">51</span>                   [OK]
    <span class="built_in">sudo</span> docker pull sonatype/nexus
</code></pre><p>下载image完成后，启动nexus</p>
<pre><code>    <span class="built_in">sudo</span> docker run <span class="operator">-d</span> -p <span class="number">8081</span>:<span class="number">8081</span> --name sonatype-nexus -v /app/nexus-data/sonatype-work:/sonatype-work sonatype/nexus:oss 
</code></pre><p>映射容器<code>8081</code>端口和数据存放目录<code>/sonatype-work</code> 到宿主机器上。</p>
<p>2.配置</p>
<p>访问 <code>http://nexus:8081</code> 默认管理员账号<code>admin/admin123</code>登录。</p>
<p><img src="/img/4-1.png" alt="http://nexus:8081"></p>
<h3 id="Jenkins安装">Jenkins安装</h3>
<p>1.安装</p>
<pre><code>    <span class="built_in">sudo</span> docker search jenkins
</code></pre><p>找到官方<code>image</code></p>
<pre><code>    jenkins                               Official Jenkins Docker image                   <span class="number">553</span>       [OK]     
    <span class="built_in">sudo</span> docker pull sonatype/nexus
</code></pre><p>下载<code>image</code>完成后，启动<code>jenkins</code></p>
<pre><code>    <span class="built_in">sudo</span> docker run --name jenkins <span class="operator">-d</span> -u root -p <span class="number">8080</span>:<span class="number">8080</span> -v /app/jenkins_home:/var/jenkins_home jenkins
</code></pre><p>映射容器<code>8080</code>端口和数据存放目录<code>/var/jenkins_home</code>  到宿主机器上。</p>
<p>2.配置</p>
<p>访问 <code>http://jenkins:8080</code> </p>
<p><img src="/img/4-2.png" alt="http://jenkins:8080"><br><a id="more"></a></p>
<h3 id="Sonar安装">Sonar安装</h3>
<p>1.安装</p>
<pre><code>    <span class="built_in">sudo</span> docker search sonar
</code></pre><p>找到官方<code>image</code></p>
<pre><code>     sonarqube                    SonarQube <span class="keyword">is</span> <span class="keyword">an</span> <span class="keyword">open</span> <span class="keyword">source</span> platform <span class="keyword">for</span> <span class="keyword">c</span>...   <span class="number">46</span>        [OK]      
     sudo docker pull sonatype/nexus
</code></pre><p>下载<code>image</code>完成后，启动<code>sonar</code></p>
<pre><code>    <span class="built_in">sudo</span> docker run <span class="operator">-d</span> --name sonarqube -p <span class="number">9000</span>:<span class="number">9000</span> -p <span class="number">9092</span>:<span class="number">9092</span> sonarqube
</code></pre><p>映射容器<code>9000</code>、<code>9092</code>端口  到宿主机器上。</p>
<p>2.配置</p>
<p>访问 <code>http://sonar:9000</code> 默认管理员账号<code>admin/admin</code>登录</p>
<p><img src="/img/4-3.png" alt="http://sonar:9000"></p>
<h3 id="开发部署实例">开发部署实例</h3>
<blockquote>
<p>场景描述：现有多<code>module</code>的Maven项目<code>qts</code>(量化择时系统),使用SVN做代码版本控制，需要通过CI服务器，做自动编译、发布、测试和代码质量检查。最终部署到SIT环境。</p>
</blockquote>
<p>1.设置本地Maven的仓库为Nexus私有仓库并添加Sonar配置，需要修改settings.xml,</p>
<pre><code>    <span class="tag">&lt;<span class="title">settings</span>&gt;</span> 
     <span class="comment">&lt;!-- 仓库设置Nexus --&gt;</span>
     <span class="tag">&lt;<span class="title">mirrors</span>&gt;</span>
        <span class="tag">&lt;<span class="title">mirror</span>&gt;</span>
        <span class="tag">&lt;<span class="title">id</span>&gt;</span>local_mirror<span class="tag">&lt;/<span class="title">id</span>&gt;</span> 
        <span class="tag">&lt;<span class="title">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="title">mirrorOf</span>&gt;</span>
        <span class="tag">&lt;<span class="title">name</span>&gt;</span>local_mirror<span class="tag">&lt;/<span class="title">name</span>&gt;</span>
        <span class="tag">&lt;<span class="title">url</span>&gt;</span>http://nexus:8081/content/groups/public/<span class="tag">&lt;/<span class="title">url</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">mirror</span>&gt;</span>
     <span class="tag">&lt;/<span class="title">mirrors</span>&gt;</span> 
     <span class="tag">&lt;<span class="title">profiles</span>&gt;</span>
            <span class="comment">&lt;!-- Sonar 配置 --&gt;</span>
            <span class="tag">&lt;<span class="title">profile</span>&gt;</span>
                <span class="tag">&lt;<span class="title">id</span>&gt;</span>sonar<span class="tag">&lt;/<span class="title">id</span>&gt;</span>
                <span class="tag">&lt;<span class="title">activation</span>&gt;</span>
                    <span class="tag">&lt;<span class="title">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="title">activeByDefault</span>&gt;</span>
                <span class="tag">&lt;/<span class="title">activation</span>&gt;</span>
                <span class="tag">&lt;<span class="title">properties</span>&gt;</span>
                    <span class="comment">&lt;!-- optional URL to server. Default value is http://localhost:9000 --&gt;</span>
                    <span class="tag">&lt;<span class="title">sonar.host.url</span>&gt;</span>http://sonar:9000/<span class="tag">&lt;/<span class="title">sonar.host.url</span>&gt;</span>
                    <span class="tag">&lt;<span class="title">sonar.jdbc.url</span>&gt;</span>jdbc:h2:tcp://sonar/sonar<span class="tag">&lt;/<span class="title">sonar.jdbc.url</span>&gt;</span>
                <span class="tag">&lt;/<span class="title">properties</span>&gt;</span>
            <span class="tag">&lt;/<span class="title">profile</span>&gt;</span>
         <span class="tag">&lt;/<span class="title">profiles</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">settings</span>&gt;</span>
</code></pre><p>2.打开<code>Jenkins</code>管理控制台，进入<code>系统配置</code>-&gt;<code>管理插件</code>,安装以下插件：</p>
<pre><code>        *Maven Integration plugin <span class="comment">//Maven集成插件</span>
        *Publish Over SSH    <span class="comment">//发布SSH工具</span>
        *SonarQube Plugin    <span class="comment">//Sonar插件    </span>
        *Subversion Plug-<span class="keyword">in</span> <span class="comment">//Svn插件</span>
</code></pre><p>进入<code>系统配置</code>-&gt;<code>系统设置</code> 修改 <code>Maven Configuration</code>,并按上步配置settings.xml</p>
<p><img src="/img/4-4.png" alt="http://jenkins:8080"></p>
<p>配置 <code>SonarQube Runner</code></p>
<p><img src="/img/4-5.png" alt="http://jenkins:8080"></p>
<p>配置 <code>Publish over SSH</code>,<code>192.168.55.64</code> 为SIT测试环境主机</p>
<p><img src="/img/4-6.png" alt="http://jenkins:8080"></p>
<p>3.新建 <code>Qts-sit</code> 项目</p>
<p><img src="/img/4-7.png" alt="http://jenkins:8080"></p>
<p>配置 <code>Qts-sit</code> 项目源码管理</p>
<p><img src="/img/4-8.png" alt="http://jenkins:8080"></p>
<blockquote>
<p><code>https://192.168.55.61/svn/src_code/qts@HEAD</code> SVN项目地址，<code>@HEAD</code> 表示根据版本HEAD变化检查源码。</p>
</blockquote>
<p>配置构建触发器，选择 <code>Poll SCM</code>，定义轮询规则<code>*/5 * * * *</code> 表示5分钟轮询一次。</p>
<p><img src="/img/4-9.png" alt="http://jenkins:8080"></p>
<p>选择<code>构建后操作步骤</code>-&gt;<code>SonarQube</code>, 此配置节点通过<code>Sonar Runner</code>自动任务，构建后把代码发布到Sonar做代码质量检查。</p>
<p><img src="/img/4-11.png" alt="http://jenkins:8080"></p>
<p>选择<code>构建后操作步骤</code>-&gt;<code>Send build artifacts over SSH</code><br>配置 <code>Send build artifacts over SSH</code> ，此配置节点通过SSH登录SIT测试服务器，执行Weblogic的<code>redepoly</code></p>
<p><img src="/img/4-10.png" alt="http://jenkins:8080"></p>
<p>4.测试项目<br>本地开发人员修改代码并提交SVN，5分钟后，Jenkins将会自动构建、测试、并部署到SIT测试环境。在SIT测试环境已经可以查看到最新代码的变化。</p>
<p><img src="/img/4-12.png" alt="http://jenkins:8080"></p>
<p>点击<code>SonarQube</code>,跳转到代码质量管理Sonar页面</p>
<p><img src="/img/4-13.png" alt="http://jenkins:8080"></p>
<p>5.Sonar 管理</p>
<blockquote>
<p>sonar中可以对每个项目自定义代码质量检查规则，可以安装插件以支持多种开发语言，相关配置参考官方文档。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="CI服务器">CI服务器</h3>
<p>CI服务器，持续集成服务器,通过自动化的构建来验证，包括自动编译、发布和测试，从而尽快地发现集成错误，让团队能够更快的开发内聚的软件。本文搭建基于 Docker+Jenkis+Sonar+Nexus 的CI服务器。</p>
<h3 id="环境准备">环境准备</h3>
<p>Docker环境准备（略），确信docker服务已安装并且docker命令可执行。</p>
<pre><code>    <span class="built_in">sudo</span> docker
</code></pre><h3 id="Nexus安装">Nexus安装</h3>
<p>1.安装</p>
<pre><code>    <span class="built_in">sudo</span> docker search nexus
</code></pre><p>找到<code>sonatype/nexus</code></p>
<pre><code>    sonatype/nexus                       Sonatype Nexus                                  <span class="number">51</span>                   [OK]
    <span class="built_in">sudo</span> docker pull sonatype/nexus
</code></pre><p>下载image完成后，启动nexus</p>
<pre><code>    <span class="built_in">sudo</span> docker run <span class="operator">-d</span> -p <span class="number">8081</span>:<span class="number">8081</span> --name sonatype-nexus -v /app/nexus-data/sonatype-work:/sonatype-work sonatype/nexus:oss 
</code></pre><p>映射容器<code>8081</code>端口和数据存放目录<code>/sonatype-work</code> 到宿主机器上。</p>
<p>2.配置</p>
<p>访问 <code>http://nexus:8081</code> 默认管理员账号<code>admin/admin123</code>登录。</p>
<p><img src="/img/4-1.png" alt="http://nexus:8081"></p>
<h3 id="Jenkins安装">Jenkins安装</h3>
<p>1.安装</p>
<pre><code>    <span class="built_in">sudo</span> docker search jenkins
</code></pre><p>找到官方<code>image</code></p>
<pre><code>    jenkins                               Official Jenkins Docker image                   <span class="number">553</span>       [OK]     
    <span class="built_in">sudo</span> docker pull sonatype/nexus
</code></pre><p>下载<code>image</code>完成后，启动<code>jenkins</code></p>
<pre><code>    <span class="built_in">sudo</span> docker run --name jenkins <span class="operator">-d</span> -u root -p <span class="number">8080</span>:<span class="number">8080</span> -v /app/jenkins_home:/var/jenkins_home jenkins
</code></pre><p>映射容器<code>8080</code>端口和数据存放目录<code>/var/jenkins_home</code>  到宿主机器上。</p>
<p>2.配置</p>
<p>访问 <code>http://jenkins:8080</code> </p>
<p><img src="/img/4-2.png" alt="http://jenkins:8080"><br>]]>
    
    </summary>
    
      <category term="Jenkins" scheme="http://xusida.github.io/tags/Jenkins/"/>
    
      <category term="Sonar" scheme="http://xusida.github.io/tags/Sonar/"/>
    
      <category term="Docker" scheme="http://xusida.github.io/tags/Docker/"/>
    
      <category term="Nexus" scheme="http://xusida.github.io/tags/Nexus/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hadoop做文件服务器POC<3>Nginx文件缓存]]></title>
    <link href="http://xusida.github.io/2015/03/31/Hadoop%E5%81%9A%E6%96%87%E4%BB%B6%E6%9C%8D%E5%8A%A1%E5%99%A8POC3/"/>
    <id>http://xusida.github.io/2015/03/31/Hadoop做文件服务器POC3/</id>
    <published>2015-03-31T08:59:48.000Z</published>
    <updated>2015-04-01T03:35:55.000Z</updated>
    <content type="html"><![CDATA[<h2 id="安装Nginx">安装Nginx</h2>
<ol>
<li><p>下载Nginx</p>
<pre><code> <span class="variable">$ </span>cd /app/nginx
 <span class="variable">$ </span><span class="constant">Wget</span> <span class="symbol">http:</span>/<span class="regexp">/nginx.org/download</span><span class="regexp">/nginx-1.7.11.tar.gz</span>
</code></pre></li>
<li><p>编译Nginx</p>
<pre><code> <span class="variable">$ </span>cd /app/nginx
 <span class="variable">$ </span>tar zvxf nginx-<span class="number">1.7</span>.<span class="number">11</span>.tar.gz
 <span class="variable">$ </span>cd nginx-<span class="number">1.7</span>.<span class="number">11</span>
 <span class="variable">$ </span>.configure
</code></pre></li>
<li><p>安装Nginx</p>
<pre><code> $ <span class="keyword">make</span> &amp; <span class="keyword">make</span> install
</code></pre></li>
</ol>
<h2 id="配置反向代理">配置反向代理</h2>
<ol>
<li><p>修改配置文件</p>
<pre><code>     $ <span class="keyword">cd</span> /usr/local/nginx
     $ <span class="keyword">vi</span> ./<span class="keyword">conf</span>/nginx.<span class="keyword">conf</span>
</code></pre></li>
<li><p>添加以下代码到server&gt;location / 中</p>
<pre><code>     <span class="title">add_header</span> <span class="string">'Access-Control-Allow-Origin'</span> <span class="string">'*'</span>;
     <span class="title">add_header</span> <span class="string">'Access-Control-Allow-Credentials'</span> <span class="string">'true'</span>;
     <span class="title">add_header</span> <span class="string">'Access-Control-Allow-Methods'</span> <span class="string">'GET'</span>;
     <span class="title">proxy_pass</span> <span class="url">http://192.168.55.64:8002/HDFSWeb/</span>;
</code></pre></li>
<li>保存配置</li>
</ol>
<h2 id="配置文件缓存">配置文件缓存</h2>
<ol>
<li><p>修改配置文件</p>
<pre><code>     $ <span class="keyword">cd</span> /usr/local/nginx
     $ <span class="keyword">vi</span> ./<span class="keyword">conf</span>/nginx.<span class="keyword">conf</span>
</code></pre></li>
<li><p>添加以下代码到server 中</p>
<pre><code>   <span class="comment">##cache##</span>
   <span class="title">proxy_connect_timeout</span> <span class="number">5</span>;
   <span class="title">proxy_read_timeout</span> <span class="number">60</span>;
   <span class="title">proxy_send_timeout</span> <span class="number">5</span>;
   <span class="title">proxy_buffer_size</span> <span class="number">16k</span>;
   <span class="title">proxy_buffers</span> <span class="number">4</span> <span class="number">64k</span>;
   <span class="title">proxy_busy_buffers_size</span> <span class="number">128k</span>;
   <span class="title">proxy_temp_file_write_size</span> <span class="number">128k</span>;
   <span class="title">proxy_temp_path</span> /home/temp_dir;
   <span class="title">proxy_cache_path</span> /home/cache levels=<span class="number">1</span>:<span class="number">2</span> keys_zone=cache_one:<span class="number">200m</span> inactive=<span class="number">1d</span> max_size=<span class="number">30g</span>;
   <span class="comment">##end##</span>
</code></pre></li>
<li><p>添加以下代码到server 中</p>
<pre><code>   <span class="title">proxy_redirect</span> <span class="built_in">off</span>;
   <span class="title">proxy_set_header</span> Host <span class="variable">$host</span>;
   <span class="title">proxy_cache</span> cache_one;
   <span class="title">proxy_cache_valid</span> <span class="number">200</span> <span class="number">302</span> <span class="number">1h</span>;
   <span class="title">proxy_cache_valid</span> <span class="number">301</span> <span class="number">1d</span>;
   <span class="title">proxy_cache_valid</span> any <span class="number">1m</span>;
   <span class="title">expires</span> <span class="number">30d</span>;
</code></pre></li>
<li><p>保存配置</p>
</li>
</ol>
<h2 id="启动Nginx">启动Nginx</h2>
<pre><code>     $ <span class="regexp">/usr/</span>local<span class="regexp">/nginx/</span>sbin<span class="regexp">/nginx</span>
</code></pre><h2 id="测试">测试</h2>
<ol>
<li><p>点击文件下载<br> <img src="/img/3-11.png" alt="使用的是反向代理地址"></p>
</li>
<li><p>下载完成查看缓存目录</p>
<pre><code> $ <span class="built_in">cd</span> /home/cache
</code></pre><p> 查看缓存文件</p>
<pre><code> <span class="literal">-</span><span class="comment">rw</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="string">.</span> <span class="comment">1</span> <span class="comment">nobody</span> <span class="comment">nobody</span> <span class="comment">8212493</span> <span class="comment">Mar</span> <span class="comment">31</span> <span class="comment">17:27</span> <span class="comment">91aa96dab8d300dc81295f78552a4a0a</span>
</code></pre></li>
</ol>
<p><img src="/img/3-12.png" alt="vi查看文件内容"></p>
<h2 id="POC过程中的疑问">POC过程中的疑问</h2>
<ol>
<li>Hadoop是否适合做分布式文件服务器？<br> 作为分布式文件系统，<code>hadoop</code>默认的文件存储块大小为64M，而对于作为文件服务器存放小文件，会极大浪费系统资源。如果调整默认存储块大小，那么对于其它基于<code>hadoop</code>服务的应用会不会受到影响。</li>
<li>作为分布式文件服务器性能测试。<br> 性能测试尚未完成。</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="安装Nginx">安装Nginx</h2>
<ol>
<li><p>下载Nginx</p>
<pre><code> <span class="variable">$ </span>cd /app/nginx
 <span class="variable">$ </]]>
    </summary>
    
      <category term="Hadoop" scheme="http://xusida.github.io/tags/Hadoop/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hadoop做文件服务器POC<2>服务开发]]></title>
    <link href="http://xusida.github.io/2015/03/31/Hadoop%E5%81%9A%E6%96%87%E4%BB%B6%E6%9C%8D%E5%8A%A1%E5%99%A8POC2/"/>
    <id>http://xusida.github.io/2015/03/31/Hadoop做文件服务器POC2/</id>
    <published>2015-03-31T07:41:45.000Z</published>
    <updated>2015-04-01T03:35:40.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Eclipse配置">Eclipse配置</h2>
<ol>
<li><p>新建Maven项目<br> <img src="/img/3-3.png" alt="选择webapp项目"><br> <img src="/img/3-4.png" alt="配置项目"></p>
</li>
<li><p>配置pom.xml</p>
<pre><code> <span class="tag">&lt;<span class="title">project</span> <span class="attribute">xmlns</span>=<span class="value">"http://maven.apache.org/POM/4.0.0"</span> <span class="attribute">xmlns:xsi</span>=<span class="value">"http://www.w3.org/2001/XMLSchema-instance"</span>
   <span class="attribute">xsi:schemaLocation</span>=<span class="value">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"</span>&gt;</span>
   <span class="tag">&lt;<span class="title">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="title">modelVersion</span>&gt;</span>
   <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>cn.com.git<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span>
   <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>HDFSWeb<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span>
   <span class="tag">&lt;<span class="title">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="title">packaging</span>&gt;</span>
   <span class="tag">&lt;<span class="title">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="title">version</span>&gt;</span>
   <span class="tag">&lt;<span class="title">name</span>&gt;</span>HDFSWeb Maven Webapp<span class="tag">&lt;/<span class="title">name</span>&gt;</span>
   <span class="tag">&lt;<span class="title">url</span>&gt;</span>http://maven.apache.org<span class="tag">&lt;/<span class="title">url</span>&gt;</span>
   <span class="tag">&lt;<span class="title">dependencies</span>&gt;</span>
     <span class="tag">&lt;<span class="title">dependency</span>&gt;</span>
         <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>org.apache.hadoop<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span>
         <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>hadoop-common<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span>
         <span class="tag">&lt;<span class="title">version</span>&gt;</span>2.6.0<span class="tag">&lt;/<span class="title">version</span>&gt;</span>
     <span class="tag">&lt;/<span class="title">dependency</span>&gt;</span>
      <span class="tag">&lt;<span class="title">dependency</span>&gt;</span>
         <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>org.apache.hadoop<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span>
         <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>hadoop-hdfs<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span>
         <span class="tag">&lt;<span class="title">version</span>&gt;</span>2.6.0<span class="tag">&lt;/<span class="title">version</span>&gt;</span>
     <span class="tag">&lt;/<span class="title">dependency</span>&gt;</span>
   <span class="tag">&lt;/<span class="title">dependencies</span>&gt;</span>
   <span class="tag">&lt;<span class="title">build</span>&gt;</span>
     <span class="tag">&lt;<span class="title">finalName</span>&gt;</span>HDFSWeb<span class="tag">&lt;/<span class="title">finalName</span>&gt;</span>
   <span class="tag">&lt;/<span class="title">build</span>&gt;</span>
 <span class="tag">&lt;/<span class="title">project</span>&gt;</span>
</code></pre></li>
</ol>
<h2 id="代码开发">代码开发</h2>
<ol>
<li><p>编写HDFSUtil<br> <img src="/img/3-5.png" alt="新建HDFSUtil"></p>
<p> 上传文件</p>
<pre><code>     <span class="javadoc">/**
      * 用输入流上传文件到HDFS
      * 
      *<span class="javadoctag"> @param</span> is
      *<span class="javadoctag"> @param</span> remoteName
      *<span class="javadoctag"> @return</span>
      *<span class="javadoctag"> @throws</span> Exception
      */</span>
     <span class="keyword">public</span> <span class="keyword">int</span> <span class="title">upload</span>(InputStream is, String remoteName) <span class="keyword">throws</span> Exception {
         FileSystem fs = <span class="keyword">null</span>;
         <span class="keyword">try</span> {
             fs = FileSystem.get(URI.create(HDFS), conf);
             OutputStream outStream = fs.create(<span class="keyword">new</span> Path(remoteName), <span class="keyword">new</span> Progressable() {
                 <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">progress</span>() {
                     System.out.print(<span class="string">'.'</span>);
                 }
             });
             logger.info(<span class="string">"开始上传: "</span> + remoteName);
             IOUtils.copyBytes(is, outStream, <span class="number">4096000</span>, <span class="keyword">true</span>);
             logger.info(<span class="string">"上传结束！"</span>);
             is.close();
             <span class="keyword">return</span> <span class="number">0</span>;
         } <span class="keyword">catch</span> (IOException e) {
             is.close();
             e.printStackTrace();
             <span class="keyword">return</span> -<span class="number">1</span>;
         }
     }

     <span class="javadoc">/**
      * 上传文件到HDFS
      * 
      *<span class="javadoctag"> @param</span> localName
      *<span class="javadoctag"> @param</span> remoteName
      *<span class="javadoctag"> @return</span>
      *<span class="javadoctag"> @throws</span> Exception
      */</span>
     <span class="keyword">public</span> <span class="keyword">int</span> <span class="title">upload</span>(String localName, String remoteName) <span class="keyword">throws</span> Exception {
         InputStream is = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(localName));
         <span class="keyword">return</span> upload(is, remoteName);
     }
</code></pre><p> 下载文件</p>
<pre><code>     <span class="javadoc">/**
          * HDFS上下载文件并返回文件流
          * 
          *<span class="javadoctag"> @param</span> hadoopFile
          *<span class="javadoctag"> @return</span>
          *<span class="javadoctag"> @throws</span> Exception
          */</span>
         <span class="keyword">public</span> FSDataInputStream <span class="title">download</span>(String hadoopFile) <span class="keyword">throws</span> Exception {
             FSDataInputStream iStream = <span class="keyword">null</span>;
             FileSystem fs = <span class="keyword">null</span>;
             fs = FileSystem.get(URI.create(HDFS), conf);
             Path path = <span class="keyword">new</span> Path(hadoopFile);
             iStream = fs.open(path);
             <span class="keyword">return</span> iStream;
         }
</code></pre><p> 删除文件</p>
<pre><code>         <span class="javadoc">/**
          * 删除HDFS文件
          * 
          *<span class="javadoctag"> @param</span> hadoopFile
          *<span class="javadoctag"> @return</span>
          */</span>
         <span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">deleteFile</span>(String hadoopFile) {
             <span class="keyword">try</span> {
                 FileSystem fs = FileSystem.get(URI.create(HDFS), conf);
                 Path path = <span class="keyword">new</span> Path(hadoopFile);
                 fs.delete(path, <span class="keyword">true</span>);
                 fs.close();
             } <span class="keyword">catch</span> (Exception e) {
                 e.printStackTrace();
                 <span class="keyword">return</span> <span class="keyword">false</span>;
             }
             <span class="keyword">return</span> <span class="keyword">true</span>;
         }
</code></pre><p> 显示文件夹文件列表</p>
<pre><code>         <span class="javadoc">/**
          * 显示文件夹中文件列表
          * 
          *<span class="javadoctag"> @param</span> folder
          *<span class="javadoctag"> @return</span> 文件列表对象
          *<span class="javadoctag"> @throws</span> Exception
          */</span>
         <span class="keyword">public</span> FileStatus[] <span class="title">list</span>(String folder) <span class="keyword">throws</span> Exception {
             Path path = <span class="keyword">new</span> Path(folder);
             FileSystem fs = FileSystem.get(URI.create(HDFS), conf);
             <span class="keyword">return</span> fs.listStatus(path);
         }

         <span class="javadoc">/**
          * 显示文件夹中文件列表并打印
          * 
          *<span class="javadoctag"> @param</span> folder
          *<span class="javadoctag"> @throws</span> Exception
          */</span>
         <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ls</span>(String folder) <span class="keyword">throws</span> Exception {
             Path path = <span class="keyword">new</span> Path(folder);
             FileSystem fs = FileSystem.get(URI.create(HDFS), conf);
             FileStatus[] list = fs.listStatus(path);
             <span class="keyword">for</span> (FileStatus f : list) {
                 System.out.printf(<span class="string">"name: %s, folder: %s, size: %d\n"</span>, f.getPath(), f.isDir(), f.getLen());
             }
         }    
</code></pre></li>
<li><p>前端页面<br> <img src="/img/3-6.png" alt="WebContent目录"></p>
<p> <img src="/img/3-7.png" alt="Web页面"></p>
</li>
</ol>
<h2 id="Web部署">Web部署</h2>
<ol>
<li><p>应用打包成war</p>
<pre><code> Eclipse&gt;<span class="keyword">File</span>&gt;<span class="keyword">Export</span>&gt;Web&gt;war file&gt;HDFSWeb.war
</code></pre></li>
<li><p>部署到weblogic 11g</p>
<pre><code> Weblogic Console&gt;部署&gt;<span class="keyword">new</span>&gt;upload war&gt;<span class="keyword">finish</span>&gt;激活更改&gt;启动HDFSWeb    
</code></pre></li>
<li><p>查看部署结果<br> <img src="/img/3-8.png" alt="Web页面"></p>
</li>
</ol>
<h2 id="测试HDFS上传和下载">测试HDFS上传和下载</h2>
<p>测试<br>    <img src="/img/3-9.png" alt="测试上传"><br>    <img src="/img/3-10.png" alt="测试下载"></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Eclipse配置">Eclipse配置</h2>
<ol>
<li><p>新建Maven项目<br> <img src="/img/3-3.png" alt="选择webapp项目"><br> <img src="/img/3-4.png" alt="配置项目"]]>
    </summary>
    
      <category term="Hadoop" scheme="http://xusida.github.io/tags/Hadoop/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hadoop做文件服务器POC<1>环境准备]]></title>
    <link href="http://xusida.github.io/2015/03/30/Hadoop%E5%81%9A%E6%96%87%E4%BB%B6%E6%9C%8D%E5%8A%A1%E5%99%A8POC1/"/>
    <id>http://xusida.github.io/2015/03/30/Hadoop做文件服务器POC1/</id>
    <published>2015-03-30T08:01:45.000Z</published>
    <updated>2015-04-01T03:35:00.000Z</updated>
    <content type="html"><![CDATA[<h2 id="硬件准备">硬件准备</h2>
<table>
<thead>
<tr>
<th>机器名</th>
<th>IP</th>
<th>硬件配置</th>
<th>操作系统</th>
</tr>
</thead>
<tbody>
<tr>
<td>nimbus</td>
<td>192.168.55.173</td>
<td>4cpu 2.93GHz 4G内存</td>
<td>Linux x86_64</td>
</tr>
<tr>
<td>supervisor1</td>
<td>192.168.55.174</td>
<td>4cpu 2.93GHz 4G内存</td>
<td>Linux x86_64</td>
</tr>
<tr>
<td>supervisor2</td>
<td>192.168.55.175</td>
<td>4cpu 2.93GHz 4G内存</td>
<td>Linux x86_64</td>
</tr>
</tbody>
</table>
<h2 id="软件准备">软件准备</h2>
<blockquote>
<p>三台虚拟机，一台作为<code>Hadoop</code>的<code>namenode</code>，另外两台做<code>Hadoop</code>的<code>datanode</code>。</p>
</blockquote>
<h3 id="基本软件安装">基本软件安装</h3>
<blockquote>
<p>三台机器必备安装软件，jdk、hadoop</p>
</blockquote>
<h4 id="Jdk1-7-0_15安装">Jdk1.7.0_15安装</h4>
<ol>
<li><p>下载JDK</p>
<pre><code> <span class="variable">$ </span>wget <span class="symbol">http:</span>/<span class="regexp">/download.oracle.com/otn</span>-pub/java/jdk/<span class="number">8</span>u31-b13/jdk-<span class="number">7</span>u15-linux-x64.tar.gz
</code></pre></li>
<li><p>解压JDK</p>
<pre><code> <span class="title">tar</span> zvxf jdk-7u15-linux-x64.tar.gz
</code></pre></li>
<li><p>设置环境变量</p>
<pre><code> <span class="variable">$ </span>set <span class="constant">PATH</span>=<span class="regexp">/your_jdk_unzip_dir/jdk</span>1.<span class="number">7.0_15</span>/<span class="symbol">bin:</span><span class="variable">$PATH</span>
 <span class="variable">$ </span>set <span class="constant">JAVA_HOME</span>=<span class="regexp">/your_jdk_unzip_dir/jdk</span>1.<span class="number">7.0_15</span>
</code></pre></li>
<li><p>验证Jdk版本</p>
<pre><code> $ jdk -<span class="keyword">version</span>
</code></pre></li>
</ol>
<h4 id="Hadoop2-6-0安装">Hadoop2.6.0安装</h4>
<ol>
<li><p>下载Hadoop</p>
<pre><code> <span class="variable">$ </span>wget <span class="symbol">http:</span>/<span class="regexp">/apache.fayea.com/hadoop</span><span class="regexp">/common/stable</span><span class="regexp">/hadoop-2.6.0.tar.gz</span>
</code></pre></li>
<li><p>切换root用户添加Hadoop用户</p>
<pre><code> <span class="variable">$ </span>groupadd hadoop  
 <span class="variable">$ </span>useradd hadoop hadoop  
 <span class="variable">$ </span>passwd  hadoop  <span class="comment">#为用户添加密码   可以不设置密码  </span>
</code></pre></li>
<li><p>安装ssh</p>
<pre><code> <span class="variable">$ </span>rpm -qa |grep ssh  <span class="comment">#检查是否装了SSH包  </span>
 <span class="variable">$ </span>yum install openssh-server  <span class="comment"># 安装ssh  </span>
 <span class="variable">$ </span>chkconfig --list sshd <span class="comment">#检查SSHD是否设置为开机启动  </span>
 <span class="variable">$ </span>chkconfig --level <span class="number">2345</span> sshd on  <span class="comment">#如果没设置启动就设置下.  </span>
 <span class="variable">$ </span>service sshd restart  <span class="comment">#重新启动  </span>
</code></pre></li>
<li><p>配置ssh无密码登录</p>
<pre><code> nimbus<span class="variable">$ </span>ssh-keygen -t rsa
 nimbus<span class="variable">$ </span>ssh-copy-id hadoop<span class="variable">@nimbus</span>
 nimbus<span class="variable">$ </span>ssh-copy-id hadoop<span class="variable">@supervisor1</span>
 nimbus<span class="variable">$ </span>ssh-copy-id hadoop<span class="variable">@supervisor2</span>
</code></pre><p> 然后用scp命令，把公钥文件发放给slaver</p>
<pre><code> nimbus<span class="variable">$ </span>scp .ssh/id_rsa.pub hadoop<span class="variable">@supervisor1</span><span class="symbol">:/home/hadoop/id_rsa_01</span>.pub
 nimbus<span class="variable">$ </span>scp .ssh/id_rsa.pub hadoop<span class="variable">@supervisor2</span><span class="symbol">:/home/hadoop/id_rsa_01</span>.pub
</code></pre><p> 测试无密码登录</p>
<pre><code> <span class="variable">$ </span>ssh nimbus
 <span class="variable">$ </span>ssh supervisor1
 <span class="variable">$ </span>ssh supervisor2
</code></pre></li>
<li><p>安装hadoop</p>
<pre><code> <span class="variable">$ </span>tar vxzf hadoop-<span class="number">2.6</span>.<span class="number">0</span>.tar.gz
</code></pre><p> 修改hadoop配置文件<br>  slaves</p>
<pre><code> <span class="variable">$vi</span> etc/hadoop/slaves
 supervisor1
 supervisor2
</code></pre><p>  core-site.xml</p>
<pre><code> $vi etc/hadoop/core-site.xml
 <span class="variable">&lt;configuration&gt;</span>
        <span class="variable">&lt;property&gt;</span>
                 <span class="variable">&lt;name&gt;</span>fs.defaultFS<span class="variable">&lt;/name&gt;</span>
                 <span class="variable">&lt;value&gt;</span>hdfs://nimbus:8020<span class="variable">&lt;/value&gt;</span>
        <span class="variable">&lt;/property&gt;</span>
        <span class="variable">&lt;property&gt;</span>
                 <span class="variable">&lt;name&gt;</span>io.file.buffer.size<span class="variable">&lt;/name&gt;</span>
                 <span class="variable">&lt;value&gt;</span>131072<span class="variable">&lt;/value&gt;</span>
         <span class="variable">&lt;/property&gt;</span>
        <span class="variable">&lt;property&gt;</span>
                <span class="variable">&lt;name&gt;</span>hadoop.tmp.dir<span class="variable">&lt;/name&gt;</span>
                <span class="variable">&lt;value&gt;</span>file:/app/hadoop/tmp<span class="variable">&lt;/value&gt;</span>
                <span class="variable">&lt;description&gt;</span>Abase for other temporary   directories.<span class="variable">&lt;/description&gt;</span>
        <span class="variable">&lt;/property&gt;</span>
         <span class="variable">&lt;property&gt;</span>
                <span class="variable">&lt;name&gt;</span>hadoop.proxyuser.u0.hosts<span class="variable">&lt;/name&gt;</span>
                <span class="variable">&lt;value&gt;</span><span class="keyword">*</span><span class="variable">&lt;/value&gt;</span>
        <span class="variable">&lt;/property&gt;</span>
        <span class="variable">&lt;property&gt;</span>
                <span class="variable">&lt;name&gt;</span>hadoop.proxyuser.u0.groups<span class="variable">&lt;/name&gt;</span>
                <span class="variable">&lt;value&gt;</span><span class="keyword">*</span><span class="variable">&lt;/value&gt;</span>
        <span class="variable">&lt;/property&gt;</span>
 <span class="variable">&lt;/configuration&gt;</span>
</code></pre><p>  hdfs-site.xml</p>
<pre><code> $vi etc/hadoop/hdfs-site.xml
 <span class="tag">&lt;<span class="title">configuration</span>&gt;</span>
       <span class="tag">&lt;<span class="title">property</span>&gt;</span>
                 <span class="tag">&lt;<span class="title">name</span>&gt;</span>dfs.namenode.secondary.http-address<span class="tag">&lt;/<span class="title">name</span>&gt;</span>
                <span class="tag">&lt;<span class="title">value</span>&gt;</span>nimbus:9001<span class="tag">&lt;/<span class="title">value</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">property</span>&gt;</span>
      <span class="tag">&lt;<span class="title">property</span>&gt;</span>
              <span class="tag">&lt;<span class="title">name</span>&gt;</span>dfs.namenode.name.dir<span class="tag">&lt;/<span class="title">name</span>&gt;</span>
              <span class="tag">&lt;<span class="title">value</span>&gt;</span>file:/app/hadoop/dfs/name<span class="tag">&lt;/<span class="title">value</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">property</span>&gt;</span>
       <span class="tag">&lt;<span class="title">property</span>&gt;</span>
               <span class="tag">&lt;<span class="title">name</span>&gt;</span>dfs.datanode.data.dir<span class="tag">&lt;/<span class="title">name</span>&gt;</span>
               <span class="tag">&lt;<span class="title">value</span>&gt;</span>file:/app/hadoop/dfs/data<span class="tag">&lt;/<span class="title">value</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">property</span>&gt;</span>
        <span class="tag">&lt;<span class="title">property</span>&gt;</span>
                <span class="tag">&lt;<span class="title">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="title">name</span>&gt;</span>
                <span class="tag">&lt;<span class="title">value</span>&gt;</span>3<span class="tag">&lt;/<span class="title">value</span>&gt;</span>
         <span class="tag">&lt;/<span class="title">property</span>&gt;</span>
         <span class="tag">&lt;<span class="title">property</span>&gt;</span>
                  <span class="tag">&lt;<span class="title">name</span>&gt;</span>dfs.webhdfs.enabled<span class="tag">&lt;/<span class="title">name</span>&gt;</span>
                   <span class="tag">&lt;<span class="title">value</span>&gt;</span>true<span class="tag">&lt;/<span class="title">value</span>&gt;</span>
          <span class="tag">&lt;/<span class="title">property</span>&gt;</span>
 <span class="tag">&lt;/<span class="title">configuration</span>&gt;</span>
</code></pre><p> mapred-site.xml</p>
<pre><code> $vi etc/hadoop/mapred-site.xml
 <span class="tag">&lt;<span class="title">configuration</span>&gt;</span>
     <span class="tag">&lt;<span class="title">property</span>&gt;</span>
         <span class="tag">&lt;<span class="title">name</span>&gt;</span>mapreduce.framework.name<span class="tag">&lt;/<span class="title">name</span>&gt;</span>
         <span class="tag">&lt;<span class="title">value</span>&gt;</span>yarn<span class="tag">&lt;/<span class="title">value</span>&gt;</span>
     <span class="tag">&lt;/<span class="title">property</span>&gt;</span>
     <span class="tag">&lt;<span class="title">property</span>&gt;</span>
       <span class="tag">&lt;<span class="title">name</span>&gt;</span>mapreduce.jobhistory.address<span class="tag">&lt;/<span class="title">name</span>&gt;</span>
       <span class="tag">&lt;<span class="title">value</span>&gt;</span>nimbus:10020<span class="tag">&lt;/<span class="title">value</span>&gt;</span>
     <span class="tag">&lt;/<span class="title">property</span>&gt;</span>
     <span class="tag">&lt;<span class="title">property</span>&gt;</span>
       <span class="tag">&lt;<span class="title">name</span>&gt;</span>mapreduce.jobhistory.webapp.address<span class="tag">&lt;/<span class="title">name</span>&gt;</span>
       <span class="tag">&lt;<span class="title">value</span>&gt;</span>nimbus:19888<span class="tag">&lt;/<span class="title">value</span>&gt;</span>
     <span class="tag">&lt;/<span class="title">property</span>&gt;</span>
     <span class="tag">&lt;<span class="title">property</span>&gt;</span>
     <span class="tag">&lt;<span class="title">name</span>&gt;</span>dfs.permissions<span class="tag">&lt;/<span class="title">name</span>&gt;</span>
     <span class="tag">&lt;<span class="title">value</span>&gt;</span>false<span class="tag">&lt;/<span class="title">value</span>&gt;</span>
     <span class="tag">&lt;/<span class="title">property</span>&gt;</span>
 <span class="tag">&lt;/<span class="title">configuration</span>&gt;</span>
</code></pre><p> 同步hadoop目录到supervisor和supervisor2</p>
<pre><code> <span class="variable">$ </span>scp hadoop/* -<span class="constant">R</span> hadoop<span class="variable">@supervisor1</span><span class="symbol">:/app/hadoop/</span>
 <span class="variable">$ </span>scp hadoop/* -<span class="constant">R</span> hadoop<span class="variable">@supervisor2</span><span class="symbol">:/app/hadoop/</span>
</code></pre></li>
<li><p>启动hadoop</p>
<pre><code> $ ./sbin/<span class="operator"><span class="keyword">start</span>-<span class="keyword">all</span>.sh
 This script <span class="keyword">is</span> Deprecated. Instead <span class="keyword">use</span> <span class="keyword">start</span>-dfs.sh <span class="keyword">and</span> <span class="keyword">start</span>-yarn.sh
 <span class="number">15</span>/<span class="number">03</span>/<span class="number">30</span> <span class="number">17</span>:<span class="number">50</span>:<span class="number">10</span> WARN util.NativeCodeLoader: Unable <span class="keyword">to</span> <span class="keyword">load</span> native-hadoop library <span class="keyword">for</span> your platform... <span class="keyword">using</span> builtin-java classes <span class="keyword">where</span> applicable
 <span class="keyword">Starting</span> namenodes <span class="keyword">on</span> [nimbus]
 nimbus: <span class="keyword">starting</span> namenode, logging <span class="keyword">to</span> /app/hadoop/<span class="keyword">logs</span>/hadoop-hadoop-namenode-nimbus.out
 supervisor2: <span class="keyword">starting</span> datanode, logging <span class="keyword">to</span> /app/hadoop/<span class="keyword">logs</span>/hadoop-hadoop-datanode-supervisor2.out
 supervisor1: <span class="keyword">starting</span> datanode, logging <span class="keyword">to</span> /app/hadoop/<span class="keyword">logs</span>/hadoop-hadoop-datanode-supervisor1.out
 <span class="keyword">Starting</span> secondary namenodes [nimbus]
 nimbus: <span class="keyword">starting</span> secondarynamenode, logging <span class="keyword">to</span> /app/hadoop/<span class="keyword">logs</span>/hadoop-hadoop-secondarynamenode-nimbus.out
 <span class="number">15</span>/<span class="number">03</span>/<span class="number">30</span> <span class="number">17</span>:<span class="number">50</span>:<span class="number">30</span> WARN util.NativeCodeLoader: Unable <span class="keyword">to</span> <span class="keyword">load</span> native-hadoop library <span class="keyword">for</span> your platform... <span class="keyword">using</span> builtin-java classes <span class="keyword">where</span> applicable
 <span class="keyword">starting</span> yarn daemons
 <span class="keyword">starting</span> resourcemanager, logging <span class="keyword">to</span> /app/hadoop/<span class="keyword">logs</span>/yarn-hadoop-resourcemanager-nimbus.out
 supervisor2: <span class="keyword">starting</span> nodemanager, logging <span class="keyword">to</span> /app/hadoop/<span class="keyword">logs</span>/yarn-hadoop-nodemanager-supervisor2.out
 supervisor1: <span class="keyword">starting</span> nodemanager, logging <span class="keyword">to</span> /app/hadoop/<span class="keyword">logs</span>/yarn-hadoop-nodemanager-supervisor1.out</span>
</code></pre><p> 查看进程</p>
<pre><code> nimbus<span class="variable">$ </span>jps
 <span class="number">10775</span> <span class="constant">Jps</span>
 <span class="number">10146</span> <span class="constant">NameNode</span>
 <span class="number">10305</span> <span class="constant">SecondaryNameNode</span>
 <span class="number">10464</span> <span class="constant">ResourceManager</span>

 supervisor1<span class="variable">$ </span>jps
 <span class="number">4308</span> <span class="constant">Jps</span>
 <span class="number">4094</span> <span class="constant">NodeManager</span>
 <span class="number">3993</span> <span class="constant">DataNode</span>

 supervisor2<span class="variable">$ </span>jps
 <span class="number">4308</span> <span class="constant">Jps</span>
 <span class="number">4094</span> <span class="constant">NodeManager</span>
 <span class="number">3993</span> <span class="constant">DataNode</span>    
</code></pre><p> 查看管理页面<br> <img src="/img/3-1.png" alt="http://192.168.55.173:50070/"></p>
<p> <img src="/img/3-2.png" alt="http://192.168.55.173:8088/"></p>
</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="硬件准备">硬件准备</h2>
<table>
<thead>
<tr>
<th>机器名</th>
<th>IP</th>
<th>硬件配置</th>
<th>操作系统</th>
</tr>
</thead>
<tbody>
<tr>
<td>nimbus</td]]>
    </summary>
    
      <category term="Hadoop" scheme="http://xusida.github.io/tags/Hadoop/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Docker学习<3>部署一个Web应用]]></title>
    <link href="http://xusida.github.io/2015/03/20/Docker%E5%AD%A6%E4%B9%A03/"/>
    <id>http://xusida.github.io/2015/03/20/Docker学习3/</id>
    <published>2015-03-20T08:01:45.000Z</published>
    <updated>2015-03-23T06:21:06.000Z</updated>
    <content type="html"><![CDATA[<h3 id="部署一个web应用">部署一个web应用</h3>
<ol>
<li><p>下载<code>jetty</code>镜像</p>
<pre><code> <span class="variable">$ </span>docker pull jetty
 jetty     <span class="number">9</span>        <span class="number">3</span>f468c596b78        <span class="number">2</span> days ago          <span class="number">344.1</span> <span class="constant">MB</span>
</code></pre><p>大概300M+，包括<code>OpenJdk1.7</code> 和操作系统</p>
</li>
<li><p>官方文档 <a href="https://registry.hub.docker.com/u/library/jetty/" target="_blank" rel="external">Jetty registry</a></p>
<pre><code> $ docker run <span class="operator">-d</span> jetty
</code></pre><p>测试 <code>http://container-ip:8080</code> 可以看到 <code>jetty</code> 已经运行,如果你想使用<code>host</code>的端口请做如下端口映射:</p>
<pre><code> $ docker run <span class="operator">-d</span> -p <span class="number">8888</span>:<span class="number">8080</span> jetty
</code></pre><p>现在可以用 <code>Docker host</code> 的 ip 和端口 8888 来测试 <code>jetty</code></p>
<pre><code> $curl http://docker-host-ip:8888
 <span class="tag">&lt;<span class="title">HTML</span>&gt;</span>
 <span class="tag">&lt;<span class="title">HEAD</span>&gt;</span>
 <span class="tag">&lt;<span class="title">TITLE</span>&gt;</span>Error 404 - Not Found<span class="tag">&lt;/<span class="title">TITLE</span>&gt;</span>
 <span class="tag">&lt;<span class="title">BODY</span>&gt;</span>
 <span class="tag">&lt;<span class="title">H2</span>&gt;</span>Error 404 - Not Found.<span class="tag">&lt;/<span class="title">H2</span>&gt;</span>
 No context on this server matched or handled this request.<span class="tag">&lt;<span class="title">BR</span>&gt;</span>Contexts known to this server are: <span class="tag">&lt;<span class="title">ul</span>&gt;</span><span class="tag">&lt;/<span class="title">ul</span>&gt;</span><span class="tag">&lt;<span class="title">hr</span>&gt;</span><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"http://eclipse.org/jetty"</span>&gt;</span><span class="tag">&lt;<span class="title">img</span> <span class="attribute">border</span>=<span class="value">0</span> <span class="attribute">src</span>=<span class="value">"/favicon.ico"</span>/&gt;</span><span class="tag">&lt;/<span class="title">a</span>&gt;</span>&amp;nbsp;<span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"http://eclipse.org/jetty"</span>&gt;</span>Powered by Jetty:// Java Web Server<span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;<span class="title">hr</span>/&gt;</span>
</code></pre><p><code>jetty</code>镜像的默认环境配置:</p>
<pre><code> $ docker run -i -t jetty env
 <span class="variable">PATH=</span>/usr/local/jetty/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
 <span class="variable">HOSTNAME=</span><span class="number">9</span>a862391d719
 <span class="variable">TERM=</span>xterm
 <span class="variable">JAVA_VERSION=</span><span class="number">7</span>u75
 <span class="variable">JAVA_DEBIAN_VERSION=</span><span class="number">7</span>u75-<span class="number">2.5</span>.<span class="number">4</span>-<span class="number">2</span>
 <span class="variable">JETTY_HOME=</span>/usr/local/jetty
 <span class="variable">JETTY_MAJOR=</span><span class="number">9</span>
 <span class="variable">JETTY_VERSION=</span><span class="number">9.2</span>.<span class="number">10</span>.v20150310
 <span class="variable">JETTY_TGZ_URL=</span>http://eclipse.org/downloads/download.php?<span class="variable">r=</span><span class="number">1</span>&amp;<span class="variable">file=</span>/jetty/stable-<span class="number">9</span>/dist/jetty-distribution-<span class="number">9.2</span>.<span class="number">10</span>.v20150310.tar.gz
 <span class="variable">JETTY_BASE=</span>/var/lib/jetty
 <span class="variable">JETTY_RUN=</span>/run/jetty
 <span class="variable">JETTY_STATE=</span>/run/jetty/jetty.state
 <span class="variable">TMPDIR=</span>/tmp/jetty
 <span class="variable">HOME=</span>/root    
</code></pre><p><code>Webapps</code> 被部署在容器内的 <code>/var/lib/jetty/webapps</code>.<br>挂载 <code>Docker Host</code> 上的目录到容器内：</p>
<pre><code> $ docker run -d  -v <span class="regexp">/tmp/</span>webapps:<span class="regexp">/var/</span>lib<span class="regexp">/jetty/</span>webapps -p <span class="number">8080</span>:<span class="number">8080</span> jetty
</code></pre><p>挂载 <code>Docker Host</code>上的 <code>/tmp/webapps</code> 到容器的 <code>/var/lib/jetty/webapps</code> 目录并映射 Host 上<code>8080</code>端口到容器的 <code>8080</code> 端口。<br>下面部署<code>webapp</code>到 <code>/tmp/webapps</code> 中，建立一个<code>Web Project:jetty-webapp-test</code>,在web根目录添加两个测试文件 <code>index.jsp</code> 和 <code>index.html</code>，打包成 <code>jetty-webapp-test.war</code>。把war包移动到<code>Docker Host</code>的 <code>/tmp/webapps</code> 下:</p>
<pre><code> $ curl http://localhost:8080/jetty-webapp-test/index.html
 <span class="doctype">&lt;!DOCTYPE html&gt;</span>
 <span class="tag">&lt;<span class="title">html</span>&gt;</span>
 <span class="tag">&lt;<span class="title">head</span>&gt;</span>
 <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">charset</span>=<span class="value">"UTF-8"</span>&gt;</span>
 <span class="tag">&lt;<span class="title">title</span>&gt;</span>index.html<span class="tag">&lt;/<span class="title">title</span>&gt;</span>
 <span class="tag">&lt;/<span class="title">head</span>&gt;</span>
 <span class="tag">&lt;<span class="title">body</span>&gt;</span>
 这是一个测试html！
 <span class="tag">&lt;/<span class="title">body</span>&gt;</span>
 <span class="tag">&lt;/<span class="title">html</span>&gt;</span>
 $ curl http://localhost:8080/jetty-webapp-test/index.jsp
 <span class="tag">&lt;<span class="title">html</span>&gt;</span>
 <span class="tag">&lt;<span class="title">body</span>&gt;</span>
 <span class="tag">&lt;<span class="title">h2</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="title">h2</span>&gt;</span>
 hello world!
</code></pre><p>部署完成。</p>
</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="部署一个web应用">部署一个web应用</h3>
<ol>
<li><p>下载<code>jetty</code>镜像</p>
<pre><code> <span class="variable">$ </span>docker pull jetty
 jett]]>
    </summary>
    
      <category term="Docker" scheme="http://xusida.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Docker学习<2>入门]]></title>
    <link href="http://xusida.github.io/2015/03/19/Docker%E5%AD%A6%E4%B9%A02/"/>
    <id>http://xusida.github.io/2015/03/19/Docker学习2/</id>
    <published>2015-03-19T08:01:45.000Z</published>
    <updated>2015-03-30T08:44:25.000Z</updated>
    <content type="html"><![CDATA[<h3 id="教程示例">教程示例</h3>
<p><a href="http://www.docker.org.cn/book/docker.html" target="_blank" rel="external">入门教程</a></p>
<ol>
<li><p>搜索可用的<code>docker</code>镜像</p>
<pre><code> $ docker <span class="built_in">search</span> tutorial
 NAME                                       DESCRIPTION   STARS     OFFICIAL   AUTOMATED
 learn/tutorial                                           <span class="number">8</span>                    
 caterpillar/java-tutorial                                <span class="number">2</span>                    
 caterpillar/<span class="keyword">python</span>-tutorial                              <span class="number">2</span>                    
 florentbenoit/docker-angularjs-tutorials                 <span class="number">1</span>                    [OK]
 fabioberger/dockerize-tutorial                           <span class="number">0</span>                    [OK]
 tobegit3hub/tutorial-beego                               <span class="number">0</span>                    [OK]
 wonderlamb/tutorial                        Tutorial      <span class="number">0</span>                    
 kedarvaidya/rails-tutorial-v3-dev                        <span class="number">0</span>                    [OK]
</code></pre><p>找到 <code>learn/tutorial</code>，官方入门示例。</p>
</li>
<li><p>下载容器镜像</p>
<pre><code><span class="attribute"> $ docker pull learn/tutorial
 Pulling repository learn/tutorial
 8dbd9e392a96: Downloading [================</span>=<span class="string">&gt;                                 ]    20 MB/58.34 MB 7m40s</span>
</code></pre></li>
<li><p>在<code>docker</code>容器中运行<code>hello world!</code></p>
<pre><code> $ docker <span class="command">run</span> learn/tutorial echo <span class="string">"hello word"</span>
 hello <span class="property">word</span>
</code></pre></li>
<li><p>在容器中安装新的程序</p>
<pre><code> $ docker <span class="command">run</span> learn/tutorial apt-<span class="keyword">get</span> install -y ping
</code></pre><p>在执行<code>apt-get</code> 命令的时候，要带上<code>-y</code>参数。如果不指定<code>-y</code>参数的话，<code>apt-get</code>命令会进入交互模式，需要用户输入命令来进行确认，但在<code>docker</code>环境中是无法响应这种交互的。</p>
</li>
<li><p>保存对容器的修改</p>
<pre><code> $ docker <span class="keyword">ps</span> -<span class="keyword">l</span>
 CONTAINER ID        IMAGE                   COMMAND                CREATED             STATUS              PORTS               NAMES
 <span class="number">942</span>f628e4d4f        learn/tutoria<span class="variable">l:latest</span>   <span class="string">"ping www.sina.com.cn   7 seconds ago                                               modest_heisenberg   
</span> $ docker commit <span class="number">942</span> learn/ping
 <span class="number">94015</span>fcbbe9bdf9d788ba2085de6d7409cf9cf52a7899fa3313363505fb949bc
 $ docker images
 REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
 learn/ping          latest              <span class="number">94015</span>fcbbe9b        <span class="number">15</span> seconds ago      <span class="number">128</span> MB
 centos              <span class="number">7</span>                   <span class="number">88</span>f9454e60dd        <span class="number">2</span> weeks ago         <span class="number">223.9</span> MB
 centos              centos7             <span class="number">88</span>f9454e60dd        <span class="number">2</span> weeks ago         <span class="number">223.9</span> MB
 centos              latest              <span class="number">88</span>f9454e60dd        <span class="number">2</span> weeks ago         <span class="number">223.9</span> MB
 learn/tutorial      latest              <span class="number">8</span>dbd9e392a96        <span class="number">23</span> months ago       <span class="number">128</span> MB
</code></pre><p>首先使用<code>docker ps -l</code>命令获得安装完<code>ping</code>命令之后容器的id。然后把这个镜像保存为<code>learn/ping</code>。</p>
</li>
<li><p>运行新的镜像</p>
<pre><code> $docker run learn/ping ping www.sina.<span class="keyword">com</span>.<span class="keyword">cn</span>
</code></pre></li>
</ol>
<h3 id="网上对Docker的理解">网上对Docker的理解</h3>
<blockquote>
<ol>
<li><p>每个container中运行的进程，是的的确确运行在<code>host</code>上的（用ps 可以查看的到), 这样的话，无论你的镜像是基于<code>ubuntu</code>, <code>centos</code>, 还是<code>debian</code>的，都是运行在主机内核上的（container中没有自己的内核）。也就是说如果主机内核不满足需求，container中的依赖此特性的应用程序就无法运行</p>
</li>
<li><p><code>Image</code>的分层，可以想象成<code>photoshop</code>中不同的<code>layer</code>。每一层中包含特定的文件，当container运行时，这些叠加在一起的层就构成了container的运行环境（包括相应的文件，运行库等，不包括内核）。<code>Image</code>通过依赖的关系，来确定整个镜像内到底包含那些文件。之后的版本的<code>docker</code>，会推出<code>squash</code>的功能，把不同的层压缩成为一个，和<code>Photoshop</code>中合并层的感觉差不多。</p>
</li>
<li><p><code>Docker</code>中的镜像就是一堆文件的集合，并不是像VM那样的是一个操作系统。镜像可以简单到只有一个程序文件。如果你写一个<code>helloworld</code> 静态编译后放到一个空的<code>Image</code>中（可以用FROM scratch作为基础镜像)，那么整个<code>image</code>的大小，就是你编译后的二进制文件的大小。 如果你不是静态编译的话，就要把相应的链接库放到镜像中相应的位置，才能使得程序正确运行，否则会提示找不到文件。官方提供的<code>ubuntu</code>等基础镜像，就是把依赖的文件放到正确的地方，从而使得绝大部分程序可以正常运行。和VM的镜像是完全不同的概念</p>
</li>
<li><p><code>Docker</code>能够限制container使用的主机资源。<code>lxc container</code>是<code>docker</code>最早版本的运行环境，现在他们默认采用<code>libcontainer</code>，今后估计会逐步减少<code>lxc container</code>的支持。如果要限制cpu和memory，在<code>docker run</code> 中直接使用<code>-c -m</code>参数即可。个人认为，这只是限制了container的资源，并不能够保证container能够确实分到足够的资源。当然，如果你的所有程序都是运行在container中，并且都限制好资源的话，那么应该还是可以满足你的需求的。每台<code>host</code>中，可以同时运行上百个container，互不干扰。每个container只是一个<code>host</code>中的进程，很轻量化。VM就不能做到同时运行这么多。编程接口，docker提供了Remote API和python library(docker-py), 同时还有<code>github</code>上还有很多第三方的库，支持不同的语言</p>
</li>
</ol>
</blockquote>
<h3 id="相关资料">相关资料</h3>
<ul>
<li><a href="http://dockerpool.com/static/books/docker_practice/data_management/volume.html" target="_blank" rel="external">Docker —— 从入门到实践</a></li>
<li><a href="http://www.infoq.com/cn/articles/docker-core-technology-preview" target="_blank" rel="external">深入浅出Docker（一）：Docker核心技术预览</a></li>
<li><a href="http://www.infoq.com/cn/articles/docker-command-line-quest" target="_blank" rel="external">深入浅出Docker（二）：Docker命令行探秘</a></li>
<li><a href="http://www.infoq.com/cn/articles/docker-open-source-road" target="_blank" rel="external">深入浅出Docker（三）：Docker开源之路</a></li>
<li><a href="http://www.infoq.com/cn/articles/docker-integrated-test-and-deployment" target="_blank" rel="external">深入浅出Docker（四）：Docker的集成测试部署之道</a></li>
<li><a href="http://www.infoq.com/cn/articles/docker-build-development-environment-based-on-fig" target="_blank" rel="external">深入浅出Docker（五）：基于Fig搭建开发环境</a></li>
<li><a href="http://www.infoq.com/cn/articles/deploy-your-application-like-google" target="_blank" rel="external">深入浅出Docker（六）：像谷歌一样部署你的应用</a></li>
</ul>
<h3 id="相关资源">相关资源</h3>
<ul>
<li><a href="https://www.docker.io" target="_blank" rel="external">Docker主站点</a> </li>
<li><a href="https://index.docker.io" target="_blank" rel="external">Docker注册中心</a> </li>
<li><a href="http://docs.docker.com/reference/api/registry_api/" target="_blank" rel="external">Docker注册中心相关的API</a>  </li>
<li><a href="http://docs.docker.com/reference/api/docker-io_api/" target="_blank" rel="external">Docker Hub API</a> </li>
<li><a href="http://docs.docker.com/reference/api/docker_remote_api/" target="_blank" rel="external">Docker远端应用API</a> </li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="教程示例">教程示例</h3>
<p><a href="http://www.docker.org.cn/book/docker.html" target="_blank" rel="external">入门教程</a></p>
<ol>
<li><p>搜索可用的]]>
    </summary>
    
      <category term="Docker" scheme="http://xusida.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Docker学习<1>环境准备]]></title>
    <link href="http://xusida.github.io/2015/03/18/Docker%E5%AD%A6%E4%B9%A01/"/>
    <id>http://xusida.github.io/2015/03/18/Docker学习1/</id>
    <published>2015-03-18T08:01:45.000Z</published>
    <updated>2015-03-20T09:09:20.000Z</updated>
    <content type="html"><![CDATA[<h3 id="软件准备">软件准备</h3>
<p>Oracle VirtualBox4.3.6</p>
<p>CentOS-6.6-x86_64-minimal.iso</p>
<h3 id="Docker_安装">Docker 安装</h3>
<ol>
<li><p>确认你的<code>CentOS</code> 的版本<br>首先通过以下命令确认你的CentOS 版本</p>
<pre><code> $ cat /etc/redhat-<span class="operator"><span class="keyword">release</span> 
 CentOS <span class="keyword">release</span> <span class="number">6.6</span> (Final)</span>
</code></pre></li>
<li><p>下载<code>EPEL</code> 的rpm 安装包<br>现在从上面的地址下载<code>CentOS</code> 版本所对应的<code>EPEL</code> 的版本</p>
<pre><code> <span class="variable">$ </span>wget <span class="symbol">http:</span>/<span class="regexp">/download.fedoraproject.org/pub</span><span class="regexp">/epel/</span><span class="number">6</span>/i386/epel-release-<span class="number">6</span>-<span class="number">8</span>.noarch.rpm
</code></pre></li>
<li><p>安装<code>EPEL</code><br>通过以下命令安装<code>EPEL</code> 软件包</p>
<pre><code> $ <span class="built_in">sudo</span> rpm -ivh epel-release-<span class="number">6</span>-<span class="number">8</span>.noarch.rpm
</code></pre><a id="more"></a></li>
<li><p>检查<code>EPEL</code> 源<br>安装好EPEL 源后，用yum 命令来检查是否添加到源列表</p>
<pre><code> <span class="comment"># yum repolist</span>
 Loaded plugins: fastestmirror
 Loading mirror speeds <span class="keyword">from</span> cached hostfile
  * base: mirrors.vonline.vn
  * epel: buaya.klas.<span class="keyword">or</span>.<span class="property">id</span>
  * extras: centos-hn.viettelidc.com.vn
  * updates: mirrors.fibo.vn
 repo <span class="property">id</span>        repo <span class="property">name</span>                                              status
 base           CentOS-<span class="number">6</span> - Base                                         <span class="number">6</span>,<span class="number">381</span>
 epel           Extra Packages <span class="keyword">for</span> Enterprise Linux <span class="number">6</span> - x86_64         <span class="number">10</span>,<span class="number">023</span>
 extras         CentOS-<span class="number">6</span> - Extras                                          <span class="number">13</span>
 nginx          nginx repo                                                 <span class="number">47</span>
 updates        CentOS-<span class="number">6</span> - Updates                                      <span class="number">1</span>,<span class="number">555</span>
</code></pre><p><code>EPEL</code>已经在repo 后列出，并且显示提供了上万个软件包，所以<code>EPEL</code> 已经安装到你的<code>CentOS</code>了。<br>EPEL源的配置安装到了 <code>/etc/yum.repos.d/epel.repo</code> 文件。        </p>
</li>
<li><p>安装 Docker —— CentOS-6<br>要在 <code>CentOS-6</code> 上安装 docker，请利用以下指令安装 <code>docker-io</code> 组件：</p>
<pre><code> $ <span class="built_in">sudo</span> yum install docker-io
</code></pre><p>安装 <code>docker</code> 后，你必须引导该服务才能应用它。</p>
<pre><code> $ <span class="built_in">sudo</span> service docker start
</code></pre><p>若要开机时引导 <code>docker</code> 服务：</p>
<pre><code> $ sudo chkconfig docker <span class="command"><span class="keyword">on</span></span>
</code></pre></li>
<li><p>应用 Docker<br>在缺省情况下，<code>docker</code> 必须由 root 或是通过 sudo 的权限执行。你也可以把一个用户加进 <code>docker</code> 群组来让该用户才接执行 <code>docker</code>。<br>请留意要是该用户逃出了容器之外，这样做也许会让他能提升权限。</p>
<pre><code> $ <span class="built_in">sudo</span> usermod <span class="operator">-a</span> -G docker &lt;你的用户&gt;
</code></pre><p>要从 <code>Docker Hub</code> 取得最新的稳定版 <code>CentOS</code> 官方映像：</p>
<pre><code> $ <span class="built_in">sudo</span> docker pull centos
</code></pre><p>这个指令只会取出标签为 <code>centos:latest</code> 的映像，该标签永远指向最新的稳定版 <code>CentOS</code> 发行版本，现时为 <code>CentOS 7（centos:centos7）</code>。若要访问其它版本的 <code>CentOS</code> 映像，例如 CentOS 6：</p>
<pre><code> $ <span class="built_in">sudo</span> docker pull centos:centos6
</code></pre><p>要查看已下载至本地的映像：</p>
<pre><code> $ <span class="built_in">sudo</span> docker images centos
 REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
 centos              centos6             a30bc9f3097e        <span class="number">3</span> days ago          <span class="number">215.8</span> MB
 centos              latest              dade6cb4530a        <span class="number">3</span> days ago          <span class="number">224</span> MB
 centos              centos7             dade6cb4530a        <span class="number">3</span> days ago          <span class="number">224</span> MB
</code></pre><p>要通过 <code>docker</code> 执行基本的 <code>cat</code> 指令：</p>
<pre><code> $ sudo docker run cento<span class="variable">s:latest</span> <span class="keyword">cat</span> /etc/centos-release
 CentOS Linux release <span class="number">7.0</span>.<span class="number">1406</span> (Core)
</code></pre></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="软件准备">软件准备</h3>
<p>Oracle VirtualBox4.3.6</p>
<p>CentOS-6.6-x86_64-minimal.iso</p>
<h3 id="Docker_安装">Docker 安装</h3>
<ol>
<li><p>确认你的<code>CentOS</code> 的版本<br>首先通过以下命令确认你的CentOS 版本</p>
<pre><code> $ cat /etc/redhat-<span class="operator"><span class="keyword">release</span> 
 CentOS <span class="keyword">release</span> <span class="number">6.6</span> (Final)</span>
</code></pre></li>
<li><p>下载<code>EPEL</code> 的rpm 安装包<br>现在从上面的地址下载<code>CentOS</code> 版本所对应的<code>EPEL</code> 的版本</p>
<pre><code> <span class="variable">$ </span>wget <span class="symbol">http:</span>/<span class="regexp">/download.fedoraproject.org/pub</span><span class="regexp">/epel/</span><span class="number">6</span>/i386/epel-release-<span class="number">6</span>-<span class="number">8</span>.noarch.rpm
</code></pre></li>
<li><p>安装<code>EPEL</code><br>通过以下命令安装<code>EPEL</code> 软件包</p>
<pre><code> $ <span class="built_in">sudo</span> rpm -ivh epel-release-<span class="number">6</span>-<span class="number">8</span>.noarch.rpm
</code></pre>]]>
    
    </summary>
    
      <category term="Docker" scheme="http://xusida.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[实时计算<2>最大回撤]]></title>
    <link href="http://xusida.github.io/2015/02/10/%E5%AE%9E%E6%97%B6%E8%AE%A1%E7%AE%972%E6%9C%80%E5%A4%A7%E5%9B%9E%E6%92%A4/"/>
    <id>http://xusida.github.io/2015/02/10/实时计算2最大回撤/</id>
    <published>2015-02-10T07:01:15.000Z</published>
    <updated>2015-04-01T03:09:34.000Z</updated>
    <content type="html"><![CDATA[<h2 id="最大回撤计算">最大回撤计算</h2>
<blockquote>
<p>描述：计算一批股票在一天的实时行情最大回撤值（绝对额）。<br> 名词解释：<a href="http://baike.baidu.com/view/9958471.htm" target="_blank" rel="external">最大回撤率</a>,在选定周期内任一历史时点往后推，产品净值走到最低点时的收益率回撤幅度的最大值。<br> 最大回撤用来描述买入产品后可能出现的最糟糕的情况。最大回撤是一个重要的风险指标，对于对冲基金和数量化策略交易，该指标比波动率还重要。  </p>
</blockquote>
<h3 id="要求">要求</h3>
<blockquote>
<p>实时计算，每只股票处理延迟平均不超过50ms<br>计算结果持久化，可查询每只股票某天的最大回撤值。</p>
</blockquote>
<h3 id="数据准备">数据准备</h3>
<blockquote>
<p>模拟5000只股票信息<br>模拟5000只股票一天的实时行情记录，每只股票暂定3秒抓取一次实时行情，那么每天应该有60/3×60×4=4800条行情记录。总记录数=4800×5000=2400万条行情记录。<br><a id="more"></a></p>
</blockquote>
<h3 id="场景实现分析">场景实现分析</h3>
<blockquote>
<p>实时计算股票最大回撤值，拟用<a href="http://redis.io" target="_blank" rel="external">Redis</a>保存行情记录和股票信息，<a href="https://storm.apache.org/" target="_blank" rel="external">Storm</a>计算股票某天的最大回撤值。计算完毕保存计算结果到<a href="http://redis.io" target="_blank" rel="external">Redis</a>，提供查询。 </p>
</blockquote>
<p><img src="http://i.imgur.com/XO5FoHA.png" alt=""></p>
<h4 id="Redis_数据结构">Redis 数据结构</h4>
<p><img src="http://i.imgur.com/DuLxc14.png" alt=""><br><img src="http://i.imgur.com/mPFmPg4.png" alt=""></p>
<h4 id="Storm计算拓扑">Storm计算拓扑</h4>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">TopologyBuilder builder = <span class="keyword">new</span> TopologyBuilder();   </div><div class="line">   builder.setSpout(<span class="string">"drpc-input"</span>, drpcSpout,<span class="number">25</span>); </div><div class="line">   builder.setBolt(<span class="string">"drawdown"</span>, <span class="keyword">new</span> DrawdownBolt(), <span class="number">50</span>).noneGrouping(<span class="string">"drpc-input"</span>);  </div><div class="line">   builder.setBolt(<span class="string">"return"</span>, <span class="keyword">new</span> ReturnResults(),<span class="number">50</span>).noneGrouping(<span class="string">"drawdown"</span>);</div></pre></td></tr></table></figure>

<h4 id="算法公式">算法公式</h4>
<p> 定义：对于序列$(x_1,x_2,\cdots,x_n)x_1,x_2,\cdots,x_n$ ，定义最大回撤 $d$为</p>
 <center>$$ d = \min_{i\leq j} (x_j - x_i) = \min_j (x_j - \max_{i\leq j} x_i) $$</center>


<blockquote>
<p>考虑到优化时间复杂度方面，很容易想到一个O(n)的时间复杂度 算法。因为对于每个j，j之前的最大值与j-1之前的最大值有关系，即maxj=max{xj，maxj-1},因此可以对于每次遍历只要将当前值与之前的最大值做比较，如果当前值比i之前的最大值还大，则当前最大值等于当前值，反之则等于之前最大值。对于d的维护也一样，如果当前值xj-当前最大值比之前的d还小，则当前最大回撤等于当前xj-当前最大值，反之等于之前的d。</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="javadoc">/**</span></div><div class="line"> * 获取最大回撤值</div><div class="line"> *<span class="javadoctag"> @param</span> 按时间排序的价格列表</div><div class="line"> *<span class="javadoctag"> @return</span></div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">getMaxDrawdown</span>(List&lt;String&gt; list){</div><div class="line">	<span class="keyword">double</span> maxDrawdown = <span class="number">0</span>;<span class="comment">//最大回撤值</span></div><div class="line">	<span class="keyword">double</span> price = <span class="number">0</span>;<span class="comment">//初始化比较价格</span></div><div class="line">	<span class="keyword">for</span>(String v : list){</div><div class="line">		<span class="keyword">double</span> realtimePrice =  Double.parseDouble(v);<span class="comment">//取出实时价格</span></div><div class="line">		<span class="keyword">double</span> val = price - realtimePrice ;</div><div class="line">		<span class="keyword">if</span>(val &lt; <span class="number">0</span>)<span class="comment">//如果实时价格大于比较价格</span></div><div class="line">			price = realtimePrice;</div><div class="line">		<span class="keyword">else</span></div><div class="line">			<span class="keyword">if</span>(maxDrawdown &lt; val) maxDrawdown = val;<span class="comment">//取最大回撤值</span></div><div class="line">	}</div><div class="line">	<span class="keyword">return</span> maxDrawdown;</div><div class="line">}</div></pre></td></tr></table></figure>

<h4 id="软硬件环境">软硬件环境</h4>
<table>
<thead>
<tr>
<th>机器名</th>
<th>IP</th>
<th>硬件配置</th>
<th>操作系统</th>
<th>软件配置</th>
</tr>
</thead>
<tbody>
<tr>
<td>nimbus</td>
<td>192.168.55.173</td>
<td>4cpu 2.93GHz 4G内存</td>
<td>Linux x86_64</td>
<td>redis2.8、 storm0.9.1 nimbus/UI/DRPC、zookeeper3.4.6</td>
</tr>
<tr>
<td>supervisor1</td>
<td>192.168.55.174</td>
<td>4cpu 2.93GHz 4G内存</td>
<td>Linux x86_64</td>
<td>storm0.9.1 supervisor、zookeeper3.4.6</td>
</tr>
<tr>
<td>supervisor2</td>
<td>192.168.55.175</td>
<td>4cpu 2.93GHz 4G内存</td>
<td>Linux x86_64</td>
<td>storm0.9.1 supervisor、zookeeper3.4.6</td>
</tr>
</tbody>
</table>
<ul>
<li>Nimbus 安装Redis、Storm nimbus、Storm UI和 Storm DRPC服务</li>
<li>Supervisor1和Supervisor2作为Storm supervisor计算节点</li>
</ul>
<h4 id="Redis状态">Redis状态</h4>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"># <span class="tag">Memory</span></div><div class="line">   <span class="tag">used_memory</span><span class="pseudo">:308482824</span></div><div class="line">   <span class="tag">used_memory_human</span><span class="pseudo">:294</span><span class="class">.19M</span></div><div class="line">   <span class="tag">used_memory_rss</span><span class="pseudo">:322035712</span></div><div class="line">   <span class="tag">used_memory_peak</span><span class="pseudo">:332559416</span></div><div class="line">   <span class="tag">used_memory_peak_human</span><span class="pseudo">:317</span><span class="class">.15M</span></div><div class="line">   <span class="tag">used_memory_lua</span><span class="pseudo">:35840</span></div><div class="line">   <span class="tag">mem_fragmentation_ratio</span><span class="pseudo">:1</span><span class="class">.04</span></div><div class="line">   <span class="tag">mem_allocator</span><span class="pseudo">:jemalloc-3</span><span class="class">.6</span><span class="class">.0</span></div></pre></td></tr></table></figure>

<h4 id="Storm_UI">Storm UI</h4>
<p><img src="http://i.imgur.com/0qkmRGj.png" alt=""></p>
<h4 id="场景测试结果">场景测试结果</h4>
<p><img src="http://i.imgur.com/TiU1ThV.jpg" alt=""></p>
<ul>
<li>并行调用对耗时的影响<br><img src="http://i.imgur.com/Tuee3qf.jpg" alt=""><blockquote>
<p>上图可以看出Storm在并发实时计算上的优势，当调用线程数越多，平均计算耗时越少。但是提高Storm的并行节点数并没能提高计算耗时，这可能是因为并行节点在20个左右的情况已经达到并行处理最优，再多的节点只会更多耗时在节点之间的消息传递上。</p>
</blockquote>
</li>
</ul>
<ul>
<li>并行调用对CPU和内存占用率影响<br><img src="http://i.imgur.com/l1kAfqt.jpg" alt=""><blockquote>
<p>上图可以看出随着并发调用线程数提高，瞬时cpu占用率会逐渐提高。当线程数很少，Supervisor2计算节点没有分配计算请求，cpu占用率不会变化。对于内存占用率，一般情况当计算需要的内存没有超出Storm预先开辟的内存空间时，内存占用率基本不会变化。</p>
</blockquote>
</li>
</ul>
<h4 id="场景测试结论">场景测试结论</h4>
<ol>
<li>对某只股票，某天的行情最大回撤值计算平均耗时最低2.21ms最高50ms,计算结果可查询满足场景计算要求。</li>
<li><a href="https://storm.apache.org/" target="_blank" rel="external">Storm</a>系统的处理延迟为毫秒级。</li>
<li><a href="https://storm.apache.org/" target="_blank" rel="external">Storm</a> 在场景测试中，tuple全部ack没有fail出现。</li>
<li><a href="http://redis.io" target="_blank" rel="external">Redis</a> 基于内存的数据库在读取和写入配合storm并行计算可以把延迟控制在毫秒级</li>
<li><a href="http://redis.io" target="_blank" rel="external">Redis</a> 由于单机部署在 storm nimbus机器上，没有做性能测试。作为内存数据库redis提供了丰富的数据结构和处理方式。</li>
</ol>
<h4 id="场景应用中的一些问题">场景应用中的一些问题</h4>
<ol>
<li>supervisor2 由于未知原因当机后,DRPC服务不可用。supervisor2重启后DRPC服务依然不可用，执行rebalance依然不能分配计算任务到supervisor2。重启nimbus和重新部署Topology后正常。</li>
<li>当计算处理延迟在毫秒级时，对redis的访问要及时释放连接池连接，不然会在导致连接池满，无法连接redis。</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="最大回撤计算">最大回撤计算</h2>
<blockquote>
<p>描述：计算一批股票在一天的实时行情最大回撤值（绝对额）。<br> 名词解释：<a href="http://baike.baidu.com/view/9958471.htm" target="_blank" rel="external">最大回撤率</a>,在选定周期内任一历史时点往后推，产品净值走到最低点时的收益率回撤幅度的最大值。<br> 最大回撤用来描述买入产品后可能出现的最糟糕的情况。最大回撤是一个重要的风险指标，对于对冲基金和数量化策略交易，该指标比波动率还重要。  </p>
</blockquote>
<h3 id="要求">要求</h3>
<blockquote>
<p>实时计算，每只股票处理延迟平均不超过50ms<br>计算结果持久化，可查询每只股票某天的最大回撤值。</p>
</blockquote>
<h3 id="数据准备">数据准备</h3>
<blockquote>
<p>模拟5000只股票信息<br>模拟5000只股票一天的实时行情记录，每只股票暂定3秒抓取一次实时行情，那么每天应该有60/3×60×4=4800条行情记录。总记录数=4800×5000=2400万条行情记录。<br>]]>
    
    </summary>
    
      <category term="Storm" scheme="http://xusida.github.io/tags/Storm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[实时计算<1>环境准备]]></title>
    <link href="http://xusida.github.io/2015/02/10/%E5%AE%9E%E6%97%B6%E8%AE%A1%E7%AE%971%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87/"/>
    <id>http://xusida.github.io/2015/02/10/实时计算1环境准备/</id>
    <published>2015-02-10T07:00:54.000Z</published>
    <updated>2015-03-31T10:08:22.000Z</updated>
    <content type="html"><![CDATA[<h2 id="硬件准备">硬件准备</h2>
<table>
<thead>
<tr>
<th>机器名</th>
<th>IP</th>
<th>硬件配置</th>
<th>操作系统</th>
<th>软件配置</th>
</tr>
</thead>
<tbody>
<tr>
<td>nimbus</td>
<td>192.168.55.173</td>
<td>4cpu 2.93GHz 4G内存</td>
<td>Linux x86_64</td>
<td>redis2.8、 storm0.9.1 nimbus/UI/DRPC、zookeeper3.4.6</td>
</tr>
<tr>
<td>supervisor1</td>
<td>192.168.55.174</td>
<td>4cpu 2.93GHz 4G内存</td>
<td>Linux x86_64</td>
<td>storm0.9.1 supervisor、zookeeper3.4.6</td>
</tr>
<tr>
<td>supervisor2</td>
<td>192.168.55.175</td>
<td>4cpu 2.93GHz 4G内存</td>
<td>Linux x86_64</td>
<td>storm0.9.1 supervisor、zookeeper3.4.6</td>
</tr>
</tbody>
</table>
<h2 id="软件准备">软件准备</h2>
<blockquote>
<p>三台虚拟机，一台作为Storm的nimbus和redis数据库，另外两台做Storm的supervisor。</p>
</blockquote>
<p>设置hosts文件</p>
<pre><code>    <span class="keyword">vi</span> /ets/hosts
</code></pre><p>如下</p>
<pre><code>    127.0.0.1 nimbus
    192.168.55.173  nimbus
    192.168.55.174 supervisor1
    192.168.55.175 supervisor2
</code></pre><h3 id="基本软件安装">基本软件安装</h3>
<blockquote>
<p>三台机器必备安装软件，jdk、storm、zookeeper<br><a id="more"></a></p>
</blockquote>
<h4 id="Jdk1-7-0_15安装">Jdk1.7.0_15安装</h4>
<ol>
<li>下载JDK<pre><code> <span class="variable">$ </span>wget <span class="symbol">http:</span>/<span class="regexp">/download.oracle.com/otn</span>-pub/java/jdk/<span class="number">8</span>u31-b13/jdk-<span class="number">7</span>u15-linux-x64.tar.gz
</code></pre></li>
<li><p>解压JDK</p>
<pre><code> <span class="title">tar</span> zvxf jdk-7u15-linux-x64.tar.gz
</code></pre></li>
<li><p>设置环境变量</p>
<pre><code> <span class="variable">$ </span>set <span class="constant">PATH</span>=<span class="regexp">/your_jdk_unzip_dir/jdk</span>1.<span class="number">7.0_15</span>/<span class="symbol">bin:</span><span class="variable">$PATH</span>
 <span class="variable">$ </span>set <span class="constant">JAVA_HOME</span>=<span class="regexp">/your_jdk_unzip_dir/jdk</span>1.<span class="number">7.0_15</span>
</code></pre></li>
<li><p>验证Jdk版本</p>
<pre><code> $ jdk -<span class="keyword">version</span>
</code></pre></li>
</ol>
<h4 id="Zookeeper3-4-6安装">Zookeeper3.4.6安装</h4>
<ol>
<li><p>下载zookeeper</p>
<pre><code> <span class="variable">$ </span>wget <span class="symbol">http:</span>/<span class="regexp">/mirrors.cnnic.cn/apache</span><span class="regexp">/zookeeper/zookeeper</span>-<span class="number">3.4</span>.<span class="number">6</span>/zookeeper-<span class="number">3.4</span>.<span class="number">6</span>.tar.gz
</code></pre></li>
<li><p>解压zookeeper</p>
<pre><code> <span class="variable">$ </span>tar zvxf zookeeper-<span class="number">3.4</span>.<span class="number">6</span>.tar.gz
</code></pre></li>
<li><p>修改配置文件</p>
<pre><code>     $ vi /your_zookeeper_unzip_dir/conf/zoo.cfg

     <span class="comment"># The number of milliseconds of each tick</span>
     <span class="variable">tickTime=</span><span class="number">2000</span>
     <span class="comment"># The number of ticks that the initial</span>
     <span class="comment"># synchronization phase can take</span>
     <span class="variable">initLimit=</span><span class="number">10</span>
     <span class="comment"># The number of ticks that can pass between</span>
     <span class="comment"># sending a request and getting an acknowledgement</span>
     <span class="variable">syncLimit=</span><span class="number">5</span>
     <span class="comment"># the directory where the snapshot is stored.</span>
     <span class="variable">dataDir=</span>/your_zookeeper_unzip_dir/dataDir/zookeeper
     <span class="comment"># the port at which the clients will connect</span>
     <span class="variable">clientPort=</span><span class="number">2181</span>            

     server.<span class="number">1</span>=<span class="number">192.168</span>.<span class="number">55.173</span>:<span class="number">2888</span>:<span class="number">3888</span>
     server.<span class="number">2</span>=<span class="number">192.168</span>.<span class="number">55.174</span>:<span class="number">2888</span>:<span class="number">3888</span>
     server.<span class="number">3</span>=<span class="number">192.168</span>.<span class="number">55.175</span>:<span class="number">2888</span>:<span class="number">3888</span>
</code></pre><blockquote>
<p>接下来在dataDir所指定的目录下创建一个文件名为myid的文件，文件中的内容只有一行，为本主机对应的id值，也就是上图中server.id中的id。例如：在服务器1中的myid的内容应该写入1。</p>
</blockquote>
</li>
<li><p>启动</p>
<pre><code>  $ ./zkServer.<span class="keyword">sh</span> start
</code></pre></li>
</ol>
<h4 id="Storm0-9-0-1安装">Storm0.9.0.1安装</h4>
<ol>
<li><p>下载storm</p>
<pre><code>  $ wget http<span class="variable">s:</span>//<span class="keyword">dl</span>.dropboxusercontent.<span class="keyword">com</span>/<span class="keyword">s</span>/tqdpoif32gufapo/storm-<span class="number">0.9</span>.<span class="number">0.1</span>.tar.gz
</code></pre></li>
<li><p>解压storm</p>
<pre><code>  <span class="variable">$ </span>tar zvxf storm-<span class="number">0</span>.<span class="number">9.0</span>.<span class="number">1</span>.tar.gz
</code></pre></li>
<li><p>修改配置文件</p>
<pre><code>  $ vi /your_storm_unzip_dir/conf/<span class="filename">storm.yaml 

  nimbus.host</span>: <span class="string">"nimbus"</span>
  <span class="filename">storm.zookeeper.servers</span>:
         - <span class="string">"nimbus"</span>
         - <span class="string">"supervisor1"</span>
         - <span class="string">"supervisor2"</span>
  <span class="filename">storm.local.dir</span>: <span class="string">"/your_storm_unzip_dir/storm-local"</span>
  <span class="filename">storm.messaging.transport</span>: <span class="string">"backtype.storm.messaging.netty.Context"</span>
  <span class="filename">storm.messaging.netty.server_worker_threads</span>: <span class="number">1</span>
  <span class="filename">storm.messaging.netty.client_worker_threads</span>: <span class="number">1</span>
  <span class="filename">storm.messaging.netty.buffer_size</span>: <span class="number">5242880</span>
  <span class="filename">storm.messaging.netty.max_retries</span>: <span class="number">100</span>
  <span class="filename">storm.messaging.netty.max_wait_ms</span>: <span class="number">1000</span>
  <span class="filename">storm.messaging.netty.min_wait_ms</span>: <span class="number">100</span>
  <span class="filename">drpc.queue.size</span>: <span class="number">1024</span>
  <span class="filename">drpc.worker.threads</span>: <span class="number">512</span>
  <span class="filename">drpc.request.timeout.secs</span>: <span class="number">30</span>
  <span class="filename">drpc.servers</span>:
      - <span class="string">"nimbus"</span>
</code></pre></li>
<li><p>启动</p>
<blockquote>
<p>nimbus </p>
<pre><code> <span class="variable">$ </span>./storm nimbus
</code></pre><p>supervisor</p>
<pre><code> <span class="variable">$ </span>./storm supervisor
</code></pre><p>drpc</p>
<pre><code> <span class="variable">$ </span>./storm drpc
</code></pre><p>storm ui</p>
<pre><code> <span class="variable">$ </span>./storm ui
</code></pre></blockquote>
</li>
</ol>
<h4 id="Redis2-8-18安装">Redis2.8.18安装</h4>
<ol>
<li><p>下载安装</p>
<pre><code> <span class="char">$ </span>wget <span class="method">http:</span>//download.redis.io/releases/redis-<span class="number">2.8</span><span class="number">.18</span>.tar.gz
 <span class="char">$ </span>tar xzf redis-<span class="number">2.8</span><span class="number">.18</span>.tar.gz
 <span class="char">$ </span>cd redis-<span class="number">2.8</span><span class="number">.18</span>
 <span class="char">$ </span>make
</code></pre></li>
<li><p>启动</p>
<pre><code> <span class="variable">$ </span>src/redis-server
</code></pre></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="硬件准备">硬件准备</h2>
<table>
<thead>
<tr>
<th>机器名</th>
<th>IP</th>
<th>硬件配置</th>
<th>操作系统</th>
<th>软件配置</th>
</tr>
</thead>
<tbody>
<tr>
<td>nimbus</td>
<td>192.168.55.173</td>
<td>4cpu 2.93GHz 4G内存</td>
<td>Linux x86_64</td>
<td>redis2.8、 storm0.9.1 nimbus/UI/DRPC、zookeeper3.4.6</td>
</tr>
<tr>
<td>supervisor1</td>
<td>192.168.55.174</td>
<td>4cpu 2.93GHz 4G内存</td>
<td>Linux x86_64</td>
<td>storm0.9.1 supervisor、zookeeper3.4.6</td>
</tr>
<tr>
<td>supervisor2</td>
<td>192.168.55.175</td>
<td>4cpu 2.93GHz 4G内存</td>
<td>Linux x86_64</td>
<td>storm0.9.1 supervisor、zookeeper3.4.6</td>
</tr>
</tbody>
</table>
<h2 id="软件准备">软件准备</h2>
<blockquote>
<p>三台虚拟机，一台作为Storm的nimbus和redis数据库，另外两台做Storm的supervisor。</p>
</blockquote>
<p>设置hosts文件</p>
<pre><code>    <span class="keyword">vi</span> /ets/hosts
</code></pre><p>如下</p>
<pre><code>    127.0.0.1 nimbus
    192.168.55.173  nimbus
    192.168.55.174 supervisor1
    192.168.55.175 supervisor2
</code></pre><h3 id="基本软件安装">基本软件安装</h3>
<blockquote>
<p>三台机器必备安装软件，jdk、storm、zookeeper<br>]]>
    
    </summary>
    
      <category term="Storm" scheme="http://xusida.github.io/tags/Storm/"/>
    
  </entry>
  
</feed>
