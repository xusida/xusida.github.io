<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[男怕夜奔，女怕思凡]]></title>
  <subtitle><![CDATA[不为无益之事，何以遣有涯之生]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://xusida.github.io/"/>
  <updated>2015-03-19T02:05:11.573Z</updated>
  <id>http://xusida.github.io/</id>
  
  <author>
    <name><![CDATA[xusida]]></name>
    <email><![CDATA[xusida.plus@gmail.com]]></email>
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Docker学习<1>环境准备]]></title>
    <link href="http://xusida.github.io/2015/03/18/Docker%E5%AD%A6%E4%B9%A0/"/>
    <id>http://xusida.github.io/2015/03/18/Docker学习/</id>
    <published>2015-03-18T08:01:45.000Z</published>
    <updated>2015-03-19T02:03:53.000Z</updated>
    <content type="html"><![CDATA[<h2 id="安装">安装</h2>
<h3 id="软件准备">软件准备</h3>
<p>Oracle VirtualBox4.3.6</p>
<p>CentOS-6.6-x86_64-minimal.iso</p>
<h3 id="Docker_安装">Docker 安装</h3>
<ol>
<li><p>确认你的CentOS 的版本<br>首先通过以下命令确认你的CentOS 版本</p>
<pre><code> $ cat /etc/redhat-<span class="operator"><span class="keyword">release</span> 
 CentOS <span class="keyword">release</span> <span class="number">6.6</span> (Final)</span>
</code></pre></li>
<li><p>下载EPEL 的rpm 安装包<br>现在从上面的地址下载CentOS 版本所对应的EPEL 的版本</p>
<pre><code> <span class="variable">$ </span>wget <span class="symbol">http:</span>/<span class="regexp">/download.fedoraproject.org/pub</span><span class="regexp">/epel/</span><span class="number">6</span>/i386/epel-release-<span class="number">6</span>-<span class="number">8</span>.noarch.rpm
</code></pre></li>
<li><p>安装EPEL<br>通过以下命令安装EPEL 软件包</p>
<pre><code> $ <span class="built_in">sudo</span> rpm -ivh epel-release-<span class="number">6</span>-<span class="number">8</span>.noarch.rpm
</code></pre><a id="more"></a></li>
<li><p>检查EPEL 源<br>安装好EPEL 源后，用yum 命令来检查是否添加到源列表</p>
<pre><code> <span class="comment"># yum repolist</span>
 Loaded plugins: fastestmirror
 Loading mirror speeds <span class="keyword">from</span> cached hostfile
  * base: mirrors.vonline.vn
  * epel: buaya.klas.<span class="keyword">or</span>.<span class="property">id</span>
  * extras: centos-hn.viettelidc.com.vn
  * updates: mirrors.fibo.vn
 repo <span class="property">id</span>        repo <span class="property">name</span>                                              status
 base           CentOS-<span class="number">6</span> - Base                                         <span class="number">6</span>,<span class="number">381</span>
 epel           Extra Packages <span class="keyword">for</span> Enterprise Linux <span class="number">6</span> - x86_64         <span class="number">10</span>,<span class="number">023</span>
 extras         CentOS-<span class="number">6</span> - Extras                                          <span class="number">13</span>
 nginx          nginx repo                                                 <span class="number">47</span>
 updates        CentOS-<span class="number">6</span> - Updates                                      <span class="number">1</span>,<span class="number">555</span>
</code></pre><p>EPEL已经在repo 后列出，并且显示提供了上万个软件包，所以EPEL 已经安装到你的CentOS了。<br>EPEL源的配置安装到了 /etc/yum.repos.d/epel.repo 文件。        repolist: 18,019</p>
</li>
<li><p>安装 Docker —— CentOS-6<br>要在 CentOS-6 上安装 docker，请利用以下指令安装 docker-io 组件：</p>
<pre><code> $ <span class="built_in">sudo</span> yum install docker-io
</code></pre><p>安装 docker 后，你必须引导该服务才能应用它。</p>
<pre><code> $ <span class="built_in">sudo</span> service docker start
</code></pre><p>若要开机时引导 docker 服务：</p>
<pre><code> $ sudo chkconfig docker <span class="command"><span class="keyword">on</span></span>
</code></pre></li>
<li><p>应用 Docker<br>在缺省情况下，docker 必须由 root 或是通过 sudo 的权限执行。你也可以把一个用户加进 docker 群组来让该用户才接执行 docker。<br>请留意要是该用户逃出了容器之外，这样做也许会让他能提升权限。</p>
<pre><code> $ <span class="built_in">sudo</span> usermod <span class="operator">-a</span> -G docker &lt;你的用户&gt;
</code></pre><p>要从 Docker Hub 取得最新的稳定版 CentOS 官方映像：</p>
<pre><code> $ <span class="built_in">sudo</span> docker pull centos
</code></pre><p>这个指令只会取出标签为 centos:latest 的映像，该标签永远指向最新的稳定版 CentOS 发行版本，现时为 CentOS 7（centos:centos7）。若要访问其它版本的 CentOS 映像，例如 CentOS 6：</p>
<pre><code> $ <span class="built_in">sudo</span> docker pull centos:centos6
</code></pre><p>要查看已下载至本地的映像：</p>
<pre><code> $ <span class="built_in">sudo</span> docker images centos
 REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
 centos              centos6             a30bc9f3097e        <span class="number">3</span> days ago          <span class="number">215.8</span> MB
 centos              latest              dade6cb4530a        <span class="number">3</span> days ago          <span class="number">224</span> MB
 centos              centos7             dade6cb4530a        <span class="number">3</span> days ago          <span class="number">224</span> MB
</code></pre><p>要通过 docker 执行基本的 cat 指令：</p>
<pre><code> $ sudo docker run cento<span class="variable">s:latest</span> <span class="keyword">cat</span> /etc/centos-release
 CentOS Linux release <span class="number">7.0</span>.<span class="number">1406</span> (Core)
</code></pre></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="安装">安装</h2>
<h3 id="软件准备">软件准备</h3>
<p>Oracle VirtualBox4.3.6</p>
<p>CentOS-6.6-x86_64-minimal.iso</p>
<h3 id="Docker_安装">Docker 安装</h3>
<ol>
<li><p>确认你的CentOS 的版本<br>首先通过以下命令确认你的CentOS 版本</p>
<pre><code> $ cat /etc/redhat-<span class="operator"><span class="keyword">release</span> 
 CentOS <span class="keyword">release</span> <span class="number">6.6</span> (Final)</span>
</code></pre></li>
<li><p>下载EPEL 的rpm 安装包<br>现在从上面的地址下载CentOS 版本所对应的EPEL 的版本</p>
<pre><code> <span class="variable">$ </span>wget <span class="symbol">http:</span>/<span class="regexp">/download.fedoraproject.org/pub</span><span class="regexp">/epel/</span><span class="number">6</span>/i386/epel-release-<span class="number">6</span>-<span class="number">8</span>.noarch.rpm
</code></pre></li>
<li><p>安装EPEL<br>通过以下命令安装EPEL 软件包</p>
<pre><code> $ <span class="built_in">sudo</span> rpm -ivh epel-release-<span class="number">6</span>-<span class="number">8</span>.noarch.rpm
</code></pre>]]>
    
    </summary>
    
      <category term="Docker" scheme="http://xusida.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[实时计算<2>最大回撤]]></title>
    <link href="http://xusida.github.io/2015/02/10/%E5%AE%9E%E6%97%B6%E8%AE%A1%E7%AE%972%E6%9C%80%E5%A4%A7%E5%9B%9E%E6%92%A4/"/>
    <id>http://xusida.github.io/2015/02/10/实时计算2最大回撤/</id>
    <published>2015-02-10T07:01:15.000Z</published>
    <updated>2015-02-10T07:36:14.000Z</updated>
    <content type="html"><![CDATA[<h2 id="最大回撤计算">最大回撤计算</h2>
<blockquote>
<p>描述：计算一批股票在一天的实时行情最大回撤值（绝对额）。<br> 名词解释：<a href="http://baike.baidu.com/view/9958471.htm" target="_blank" rel="external">最大回撤率</a>,在选定周期内任一历史时点往后推，产品净值走到最低点时的收益率回撤幅度的最大值。<br> 最大回撤用来描述买入产品后可能出现的最糟糕的情况。最大回撤是一个重要的风险指标，对于对冲基金和数量化策略交易，该指标比波动率还重要。  </p>
</blockquote>
<h3 id="要求">要求</h3>
<blockquote>
<p>实时计算，每只股票处理延迟平均不超过50ms<br>计算结果持久化，可查询每只股票某天的最大回撤值。</p>
</blockquote>
<h3 id="数据准备">数据准备</h3>
<blockquote>
<p>模拟5000只股票信息<br>模拟5000只股票一天的实时行情记录，每只股票暂定3秒抓取一次实时行情，那么每天应该有60/3×60×4=4800条行情记录。总记录数=4800×5000=2400万条行情记录。<br><a id="more"></a></p>
</blockquote>
<h3 id="场景实现分析">场景实现分析</h3>
<blockquote>
<p>实时计算股票最大回撤值，拟用<a href="http://redis.io" target="_blank" rel="external">Redis</a>保存行情记录和股票信息，<a href="https://storm.apache.org/" target="_blank" rel="external">Storm</a>计算股票某天的最大回撤值。计算完毕保存计算结果到<a href="http://redis.io" target="_blank" rel="external">Redis</a>，提供查询。 </p>
</blockquote>
<p><img src="http://i.imgur.com/XO5FoHA.png" alt=""></p>
<h4 id="Redis_数据结构">Redis 数据结构</h4>
<p><img src="http://i.imgur.com/DuLxc14.png" alt=""><br><img src="http://i.imgur.com/mPFmPg4.png" alt=""></p>
<h4 id="Storm计算拓扑">Storm计算拓扑</h4>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">TopologyBuilder builder = <span class="keyword">new</span> TopologyBuilder();   </div><div class="line">   builder.setSpout(<span class="string">"drpc-input"</span>, drpcSpout,<span class="number">25</span>); </div><div class="line">   builder.setBolt(<span class="string">"drawdown"</span>, <span class="keyword">new</span> DrawdownBolt(), <span class="number">50</span>).noneGrouping(<span class="string">"drpc-input"</span>);  </div><div class="line">   builder.setBolt(<span class="string">"return"</span>, <span class="keyword">new</span> ReturnResults(),<span class="number">50</span>).noneGrouping(<span class="string">"drawdown"</span>);</div></pre></td></tr></table></figure>

<h4 id="算法公式">算法公式</h4>
<p> 定义：对于序列$(x_1,x_2,\cdots,x_n)x_1,x_2,\cdots,x_n$ ，定义最大回撤 $d$为</p>
 <center>$$ d = \min_{i\leq j} (x_j - x_i) = \min_j (x_j - \max_{i\leq j} x_i) $$</center>


<blockquote>
<p>考虑到优化时间复杂度方面，很容易想到一个O(n)的时间复杂度 算法。因为对于每个j，j之前的最大值与j-1之前的最大值有关系，即maxj=max{xj，maxj-1},因此可以对于每次遍历只要将当前值与之前的最大值做比较，如果当前值比i之前的最大值还大，则当前最大值等于当前值，反之则等于之前最大值。对于d的维护也一样，如果当前值xj-当前最大值比之前的d还小，则当前最大回撤等于当前xj-当前最大值，反之等于之前的d。</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="javadoc">/**</span></div><div class="line"> * 获取最大回撤值</div><div class="line"> *<span class="javadoctag"> @param</span> 按时间排序的价格列表</div><div class="line"> *<span class="javadoctag"> @return</span></div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">getMaxDrawdown</span>(List&lt;String&gt; list){</div><div class="line">	<span class="keyword">double</span> maxDrawdown = <span class="number">0</span>;<span class="comment">//最大回撤值</span></div><div class="line">	<span class="keyword">double</span> price = <span class="number">0</span>;<span class="comment">//初始化比较价格</span></div><div class="line">	<span class="keyword">for</span>(String v : list){</div><div class="line">		<span class="keyword">double</span> realtimePrice =  Double.parseDouble(v);<span class="comment">//取出实时价格</span></div><div class="line">		<span class="keyword">double</span> val = price - realtimePrice ;</div><div class="line">		<span class="keyword">if</span>(val &lt; <span class="number">0</span>)<span class="comment">//如果实时价格大于比较价格</span></div><div class="line">			price = realtimePrice;</div><div class="line">		<span class="keyword">else</span></div><div class="line">			<span class="keyword">if</span>(maxDrawdown &lt; val) maxDrawdown = val;<span class="comment">//取最大回撤值</span></div><div class="line">	}</div><div class="line">	<span class="keyword">return</span> maxDrawdown;</div><div class="line">}</div></pre></td></tr></table></figure>

<h4 id="软硬件环境">软硬件环境</h4>
<table>
<thead>
<tr>
<th>机器名</th>
<th>IP</th>
<th>硬件配置</th>
<th>操作系统</th>
<th>软件配置</th>
</tr>
</thead>
<tbody>
<tr>
<td>nimbus</td>
<td>192.168.55.173</td>
<td>4cpu 2.93GHz 4G内存</td>
<td>Linux x86_64</td>
<td>redis2.8、 storm0.9.1 nimbus/UI/DRPC、zookeeper3.4.6</td>
</tr>
<tr>
<td>supervisor1</td>
<td>192.168.55.174</td>
<td>4cpu 2.93GHz 4G内存</td>
<td>Linux x86_64</td>
<td>storm0.9.1 supervisor、zookeeper3.4.6</td>
</tr>
<tr>
<td>supervisor2</td>
<td>192.168.55.175</td>
<td>4cpu 2.93GHz 4G内存</td>
<td>Linux x86_64</td>
<td>storm0.9.1 supervisor、zookeeper3.4.6</td>
</tr>
</tbody>
</table>
<ul>
<li>Nimbus 安装Redis、Storm nimbus、Storm UI和 Storm DRPC服务</li>
<li>Supervisor1和Supervisor2作为Storm supervisor计算节点</li>
</ul>
<h4 id="Redis状态">Redis状态</h4>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"># <span class="tag">Memory</span></div><div class="line">   <span class="tag">used_memory</span><span class="pseudo">:308482824</span></div><div class="line">   <span class="tag">used_memory_human</span><span class="pseudo">:294</span><span class="class">.19M</span></div><div class="line">   <span class="tag">used_memory_rss</span><span class="pseudo">:322035712</span></div><div class="line">   <span class="tag">used_memory_peak</span><span class="pseudo">:332559416</span></div><div class="line">   <span class="tag">used_memory_peak_human</span><span class="pseudo">:317</span><span class="class">.15M</span></div><div class="line">   <span class="tag">used_memory_lua</span><span class="pseudo">:35840</span></div><div class="line">   <span class="tag">mem_fragmentation_ratio</span><span class="pseudo">:1</span><span class="class">.04</span></div><div class="line">   <span class="tag">mem_allocator</span><span class="pseudo">:jemalloc-3</span><span class="class">.6</span><span class="class">.0</span></div></pre></td></tr></table></figure>

<h4 id="Storm_UI">Storm UI</h4>
<p><img src="http://i.imgur.com/0qkmRGj.png" alt=""></p>
<h4 id="场景测试结果">场景测试结果</h4>
<p><img src="http://i.imgur.com/TiU1ThV.jpg" alt=""></p>
<ul>
<li>并行调用对耗时的影响<br><img src="http://i.imgur.com/Tuee3qf.jpg" alt=""><blockquote>
<p>上图可以看出Storm在并发实时计算上的优势，当调用线程数越多，平均计算耗时越少。但是提高Storm的并行节点数并没能提高计算耗时，这可能是因为并行节点在20个左右的情况已经达到并行处理最优，再多的节点只会更多耗时在节点之间的消息传递上。</p>
</blockquote>
</li>
</ul>
<ul>
<li>并行调用对CPU和内存占用率影响<br><img src="http://i.imgur.com/l1kAfqt.jpg" alt=""><blockquote>
<p>上图可以看出随着并发调用线程数提高，瞬时cpu占用率会逐渐提高。当线程数很少，Supervisor2计算节点没有分配计算请求，cpu占用率不会变化。对于内存占用率，一般情况当计算需要的内存没有超出Storm预先开辟的内存空间时，内存占用率基本不会变化。</p>
</blockquote>
</li>
</ul>
<h4 id="场景测试结论">场景测试结论</h4>
<ol>
<li>对某只股票，某天的行情最大回撤值计算平均耗时最低2.21ms最高50ms,计算结果可查询满足场景计算要求。</li>
<li><a href="https://storm.apache.org/" target="_blank" rel="external">Storm</a>系统的处理延迟为毫秒级。</li>
<li><a href="https://storm.apache.org/" target="_blank" rel="external">Storm</a> 在场景测试中，tuple全部ack没有fail出现。</li>
<li><a href="http://redis.io" target="_blank" rel="external">Redis</a> 基于内存的数据库在读取和写入配合storm并行计算可以把延迟控制在毫秒级</li>
<li><a href="http://redis.io" target="_blank" rel="external">Redis</a> 由于单机部署在 storm nimbus机器上，没有做性能测试。作为内存数据库redis提供了丰6. 富的数据结构和处理方式。</li>
</ol>
<h4 id="场景应用中的一些问题">场景应用中的一些问题</h4>
<ol>
<li>supervisor2 由于未知原因当机后,DRPC服务不可用。supervisor2重启后DRPC服务依然不可用，执行rebalance依然不能分配计算任务到supervisor2。重启nimbus和重新部署Topology后正常。</li>
<li>当计算处理延迟在毫秒级时，对redis的访问要及时释放连接池连接，不然会在导致连接池满，无法连接redis。</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="最大回撤计算">最大回撤计算</h2>
<blockquote>
<p>描述：计算一批股票在一天的实时行情最大回撤值（绝对额）。<br> 名词解释：<a href="http://baike.baidu.com/view/9958471.htm" target="_blank" rel="external">最大回撤率</a>,在选定周期内任一历史时点往后推，产品净值走到最低点时的收益率回撤幅度的最大值。<br> 最大回撤用来描述买入产品后可能出现的最糟糕的情况。最大回撤是一个重要的风险指标，对于对冲基金和数量化策略交易，该指标比波动率还重要。  </p>
</blockquote>
<h3 id="要求">要求</h3>
<blockquote>
<p>实时计算，每只股票处理延迟平均不超过50ms<br>计算结果持久化，可查询每只股票某天的最大回撤值。</p>
</blockquote>
<h3 id="数据准备">数据准备</h3>
<blockquote>
<p>模拟5000只股票信息<br>模拟5000只股票一天的实时行情记录，每只股票暂定3秒抓取一次实时行情，那么每天应该有60/3×60×4=4800条行情记录。总记录数=4800×5000=2400万条行情记录。<br>]]>
    
    </summary>
    
      <category term="华泰证券" scheme="http://xusida.github.io/tags/%E5%8D%8E%E6%B3%B0%E8%AF%81%E5%88%B8/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[实时计算<1>环境准备]]></title>
    <link href="http://xusida.github.io/2015/02/10/%E5%AE%9E%E6%97%B6%E8%AE%A1%E7%AE%971%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87/"/>
    <id>http://xusida.github.io/2015/02/10/实时计算1环境准备/</id>
    <published>2015-02-10T07:00:54.000Z</published>
    <updated>2015-02-10T08:26:49.000Z</updated>
    <content type="html"><![CDATA[<h2 id="硬件准备">硬件准备</h2>
<table>
<thead>
<tr>
<th>机器名</th>
<th>IP</th>
<th>硬件配置</th>
<th>操作系统</th>
<th>软件配置</th>
</tr>
</thead>
<tbody>
<tr>
<td>nimbus</td>
<td>192.168.55.173</td>
<td>4cpu 2.93GHz 4G内存</td>
<td>Linux x86_64</td>
<td>redis2.8、 storm0.9.1 nimbus/UI/DRPC、zookeeper3.4.6</td>
</tr>
<tr>
<td>supervisor1</td>
<td>192.168.55.174</td>
<td>4cpu 2.93GHz 4G内存</td>
<td>Linux x86_64</td>
<td>storm0.9.1 supervisor、zookeeper3.4.6</td>
</tr>
<tr>
<td>supervisor2</td>
<td>192.168.55.175</td>
<td>4cpu 2.93GHz 4G内存</td>
<td>Linux x86_64</td>
<td>storm0.9.1 supervisor、zookeeper3.4.6</td>
</tr>
</tbody>
</table>
<h2 id="软件准备">软件准备</h2>
<blockquote>
<p>三台虚拟机，一台作为Storm的nimbus和redis数据库，另外两台做Storm的supervisor。</p>
</blockquote>
<p>设置hosts文件</p>
<pre><code>    <span class="keyword">vi</span> /ets/hosts
</code></pre><p>如下</p>
<pre><code>    127.0.0.1 nimbus
    192.168.55.173  nimbus
    192.168.55.174 supervisor1
    192.168.55.175 supervisor2
</code></pre><h3 id="基本软件安装">基本软件安装</h3>
<blockquote>
<p>三台机器必备安装软件，jdk、storm、zookeeper<br><a id="more"></a></p>
</blockquote>
<h4 id="Jdk1-7-0_15安装">Jdk1.7.0_15安装</h4>
<ol>
<li><p>下载JDK</p>
<pre><code> <span class="variable">$ </span>wget <span class="symbol">http:</span>/<span class="regexp">/download.oracle.com/otn</span>-pub/java/jdk/<span class="number">8</span>u31-b13/jdk-<span class="number">7</span>u15-linux-x64.tar.gz
</code></pre></li>
<li><p>解压JDK</p>
<pre><code> <span class="title">tar</span> zvxf jdk-7u15-linux-x64.tar.gz
</code></pre></li>
<li><p>设置环境变量</p>
<pre><code> <span class="variable">$ </span>set <span class="constant">PATH</span>=<span class="regexp">/your_jdk_unzip_dir/jdk</span>1.<span class="number">7.0_15</span>/<span class="symbol">bin:</span><span class="variable">$PATH</span>
 <span class="variable">$ </span>set <span class="constant">JAVA_HOME</span>=<span class="regexp">/your_jdk_unzip_dir/jdk</span>1.<span class="number">7.0_15</span>
</code></pre></li>
<li><p>验证Jdk版本</p>
<pre><code> $ jdk -<span class="keyword">version</span>
</code></pre></li>
</ol>
<h4 id="Zookeeper3-4-6安装">Zookeeper3.4.6安装</h4>
<ol>
<li><p>下载zookeeper</p>
<pre><code> <span class="variable">$ </span>wget <span class="symbol">http:</span>/<span class="regexp">/mirrors.cnnic.cn/apache</span><span class="regexp">/zookeeper/zookeeper</span>-<span class="number">3.4</span>.<span class="number">6</span>/zookeeper-<span class="number">3.4</span>.<span class="number">6</span>.tar.gz
</code></pre></li>
<li><p>解压zookeeper</p>
<pre><code> <span class="variable">$ </span>tar zvxf zookeeper-<span class="number">3.4</span>.<span class="number">6</span>.tar.gz
</code></pre></li>
<li><p>修改配置文件</p>
<pre><code>     $ vi /your_zookeeper_unzip_dir/conf/zoo.cfg

     <span class="comment"># The number of milliseconds of each tick</span>
     <span class="variable">tickTime=</span><span class="number">2000</span>
     <span class="comment"># The number of ticks that the initial</span>
     <span class="comment"># synchronization phase can take</span>
     <span class="variable">initLimit=</span><span class="number">10</span>
     <span class="comment"># The number of ticks that can pass between</span>
     <span class="comment"># sending a request and getting an acknowledgement</span>
     <span class="variable">syncLimit=</span><span class="number">5</span>
     <span class="comment"># the directory where the snapshot is stored.</span>
     <span class="variable">dataDir=</span>/your_zookeeper_unzip_dir/dataDir/zookeeper
     <span class="comment"># the port at which the clients will connect</span>
     <span class="variable">clientPort=</span><span class="number">2181</span>            

     server.<span class="number">1</span>=<span class="number">192.168</span>.<span class="number">55.173</span>:<span class="number">2888</span>:<span class="number">3888</span>
     server.<span class="number">2</span>=<span class="number">192.168</span>.<span class="number">55.174</span>:<span class="number">2888</span>:<span class="number">3888</span>
     server.<span class="number">3</span>=<span class="number">192.168</span>.<span class="number">55.175</span>:<span class="number">2888</span>:<span class="number">3888</span>
</code></pre><blockquote>
<p>接下来在dataDir所指定的目录下创建一个文件名为myid的文件，文件中的内容只有一行，为本主机对应的id值，也就是上图中server.id中的id。例如：在服务器1中的myid的内容应该写入1。</p>
</blockquote>
</li>
<li><p>启动</p>
<pre><code>  $ ./zkServer.<span class="keyword">sh</span> start
</code></pre></li>
</ol>
<h4 id="Storm0-9-0-1安装">Storm0.9.0.1安装</h4>
<ol>
<li><p>下载storm</p>
<pre><code>  $ wget http<span class="variable">s:</span>//<span class="keyword">dl</span>.dropboxusercontent.<span class="keyword">com</span>/<span class="keyword">s</span>/tqdpoif32gufapo/storm-<span class="number">0.9</span>.<span class="number">0.1</span>.tar.gz
</code></pre></li>
<li><p>解压storm</p>
<pre><code>  <span class="variable">$ </span>tar zvxf storm-<span class="number">0</span>.<span class="number">9.0</span>.<span class="number">1</span>.tar.gz
</code></pre></li>
<li><p>修改配置文件</p>
<pre><code>  $ vi /your_storm_unzip_dir/conf/<span class="filename">storm.yaml 

  nimbus.host</span>: <span class="string">"nimbus"</span>
  <span class="filename">storm.zookeeper.servers</span>:
         - <span class="string">"nimbus"</span>
         - <span class="string">"supervisor1"</span>
         - <span class="string">"supervisor2"</span>
  <span class="filename">storm.local.dir</span>: <span class="string">"/your_storm_unzip_dir/storm-local"</span>
  <span class="filename">storm.messaging.transport</span>: <span class="string">"backtype.storm.messaging.netty.Context"</span>
  <span class="filename">storm.messaging.netty.server_worker_threads</span>: <span class="number">1</span>
  <span class="filename">storm.messaging.netty.client_worker_threads</span>: <span class="number">1</span>
  <span class="filename">storm.messaging.netty.buffer_size</span>: <span class="number">5242880</span>
  <span class="filename">storm.messaging.netty.max_retries</span>: <span class="number">100</span>
  <span class="filename">storm.messaging.netty.max_wait_ms</span>: <span class="number">1000</span>
  <span class="filename">storm.messaging.netty.min_wait_ms</span>: <span class="number">100</span>
  <span class="filename">drpc.queue.size</span>: <span class="number">1024</span>
  <span class="filename">drpc.worker.threads</span>: <span class="number">512</span>
  <span class="filename">drpc.request.timeout.secs</span>: <span class="number">30</span>
  <span class="filename">drpc.servers</span>:
      - <span class="string">"nimbus"</span>
</code></pre></li>
<li><p>启动</p>
<blockquote>
<p>nimbus </p>
<pre><code> <span class="variable">$ </span>./storm nimbus
</code></pre><p>supervisor</p>
<pre><code> <span class="variable">$ </span>./storm supervisor
</code></pre><p>drpc</p>
<pre><code> <span class="variable">$ </span>./storm drpc
</code></pre><p>storm ui</p>
<pre><code> <span class="variable">$ </span>./storm ui
</code></pre></blockquote>
</li>
</ol>
<h4 id="Redis2-8-18安装">Redis2.8.18安装</h4>
<ol>
<li><p>下载安装</p>
<pre><code> <span class="char">$ </span>wget <span class="method">http:</span>//download.redis.io/releases/redis-<span class="number">2.8</span><span class="number">.18</span>.tar.gz
 <span class="char">$ </span>tar xzf redis-<span class="number">2.8</span><span class="number">.18</span>.tar.gz
 <span class="char">$ </span>cd redis-<span class="number">2.8</span><span class="number">.18</span>
 <span class="char">$ </span>make
</code></pre></li>
<li><p>启动</p>
<pre><code> <span class="variable">$ </span>src/redis-server
</code></pre></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="硬件准备">硬件准备</h2>
<table>
<thead>
<tr>
<th>机器名</th>
<th>IP</th>
<th>硬件配置</th>
<th>操作系统</th>
<th>软件配置</th>
</tr>
</thead>
<tbody>
<tr>
<td>nimbus</td>
<td>192.168.55.173</td>
<td>4cpu 2.93GHz 4G内存</td>
<td>Linux x86_64</td>
<td>redis2.8、 storm0.9.1 nimbus/UI/DRPC、zookeeper3.4.6</td>
</tr>
<tr>
<td>supervisor1</td>
<td>192.168.55.174</td>
<td>4cpu 2.93GHz 4G内存</td>
<td>Linux x86_64</td>
<td>storm0.9.1 supervisor、zookeeper3.4.6</td>
</tr>
<tr>
<td>supervisor2</td>
<td>192.168.55.175</td>
<td>4cpu 2.93GHz 4G内存</td>
<td>Linux x86_64</td>
<td>storm0.9.1 supervisor、zookeeper3.4.6</td>
</tr>
</tbody>
</table>
<h2 id="软件准备">软件准备</h2>
<blockquote>
<p>三台虚拟机，一台作为Storm的nimbus和redis数据库，另外两台做Storm的supervisor。</p>
</blockquote>
<p>设置hosts文件</p>
<pre><code>    <span class="keyword">vi</span> /ets/hosts
</code></pre><p>如下</p>
<pre><code>    127.0.0.1 nimbus
    192.168.55.173  nimbus
    192.168.55.174 supervisor1
    192.168.55.175 supervisor2
</code></pre><h3 id="基本软件安装">基本软件安装</h3>
<blockquote>
<p>三台机器必备安装软件，jdk、storm、zookeeper<br>]]>
    
    </summary>
    
      <category term="华泰证券" scheme="http://xusida.github.io/tags/%E5%8D%8E%E6%B3%B0%E8%AF%81%E5%88%B8/"/>
    
  </entry>
  
</feed>
